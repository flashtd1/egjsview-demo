!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=11)}([function(t,e){var n,i,r=window.MathUtil||{};r.degToRad=Math.PI/180,r.radToDeg=180/Math.PI,r.Vector2=function(t,e){this.x=t||0,this.y=e||0},r.Vector2.prototype={constructor:r.Vector2,set:function(t,e){return this.x=t,this.y=e,this},copy:function(t){return this.x=t.x,this.y=t.y,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}},r.Vector3=function(t,e,n){this.x=t||0,this.y=e||0,this.z=n||0},r.Vector3.prototype={constructor:r.Vector3,set:function(t,e,n){return this.x=t,this.y=e,this.z=n,this},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},normalize:function(){var t=this.length();if(0!==t){var e=1/t;this.multiplyScalar(e)}else this.x=0,this.y=0,this.z=0;return this},multiplyScalar:function(t){this.x*=t,this.y*=t,this.z*=t},applyQuaternion:function(t){var e=this.x,n=this.y,i=this.z,r=t.x,o=t.y,a=t.z,s=t.w,u=s*e+o*i-a*n,h=s*n+a*e-r*i,c=s*i+r*n-o*e,l=-r*e-o*n-a*i;return this.x=u*s+l*-r+h*-a-c*-o,this.y=h*s+l*-o+c*-r-u*-a,this.z=c*s+l*-a+u*-o-h*-r,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},crossVectors:function(t,e){var n=t.x,i=t.y,r=t.z,o=e.x,a=e.y,s=e.z;return this.x=i*s-r*a,this.y=r*o-n*s,this.z=n*a-i*o,this}},r.Quaternion=function(t,e,n,i){this.x=t||0,this.y=e||0,this.z=n||0,this.w=void 0!==i?i:1},r.Quaternion.prototype={constructor:r.Quaternion,set:function(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this},setFromEulerXYZ:function(t,e,n){var i=Math.cos(t/2),r=Math.cos(e/2),o=Math.cos(n/2),a=Math.sin(t/2),s=Math.sin(e/2),u=Math.sin(n/2);return this.x=a*r*o+i*s*u,this.y=i*s*o-a*r*u,this.z=i*r*u+a*s*o,this.w=i*r*o-a*s*u,this},setFromEulerYXZ:function(t,e,n){var i=Math.cos(t/2),r=Math.cos(e/2),o=Math.cos(n/2),a=Math.sin(t/2),s=Math.sin(e/2),u=Math.sin(n/2);return this.x=a*r*o+i*s*u,this.y=i*s*o-a*r*u,this.z=i*r*u-a*s*o,this.w=i*r*o+a*s*u,this},setFromAxisAngle:function(t,e){var n=e/2,i=Math.sin(n);return this.x=t.x*i,this.y=t.y*i,this.z=t.z*i,this.w=Math.cos(n),this},multiply:function(t){return this.multiplyQuaternions(this,t)},multiplyQuaternions:function(t,e){var n=t.x,i=t.y,r=t.z,o=t.w,a=e.x,s=e.y,u=e.z,h=e.w;return this.x=n*h+o*a+i*u-r*s,this.y=i*h+o*s+r*a-n*u,this.z=r*h+o*u+n*s-i*a,this.w=o*h-n*a-i*s-r*u,this},inverse:function(){return this.x*=-1,this.y*=-1,this.z*=-1,this.normalize(),this},normalize:function(){var t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=1):(t=1/t,this.x=this.x*t,this.y=this.y*t,this.z=this.z*t,this.w=this.w*t),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var n=this.x,i=this.y,r=this.z,o=this.w,a=o*t.w+n*t.x+i*t.y+r*t.z;if(a<0?(this.w=-t.w,this.x=-t.x,this.y=-t.y,this.z=-t.z,a=-a):this.copy(t),a>=1)return this.w=o,this.x=n,this.y=i,this.z=r,this;var s=Math.acos(a),u=Math.sqrt(1-a*a);if(Math.abs(u)<.001)return this.w=.5*(o+this.w),this.x=.5*(n+this.x),this.y=.5*(i+this.y),this.z=.5*(r+this.z),this;var h=Math.sin((1-e)*s)/u,c=Math.sin(e*s)/u;return this.w=o*h+this.w*c,this.x=n*h+this.x*c,this.y=i*h+this.y*c,this.z=r*h+this.z*c,this},setFromUnitVectors:function(t,e){return void 0===n&&(n=new r.Vector3),(i=t.dot(e)+1)<1e-6?(i=0,Math.abs(t.x)>Math.abs(t.z)?n.set(-t.y,t.x,0):n.set(0,-t.z,t.y)):n.crossVectors(t,e),this.x=n.x,this.y=n.y,this.z=n.z,this.w=i,this.normalize(),this}},t.exports=r},function(t,e){var n,i,r,o,a,s=window.Util||{};s.MIN_TIMESTEP=.001,s.MAX_TIMESTEP=1,s.base64=function(t,e){return"data:"+t+";base64,"+e},s.clamp=function(t,e,n){return Math.min(Math.max(e,t),n)},s.lerp=function(t,e,n){return t+(e-t)*n},s.race=function(t){return Promise.race?Promise.race(t):new Promise((function(e,n){for(var i=0;i<t.length;i++)t[i].then(e,n)}))},s.isIOS=(n=/iPad|iPhone|iPod/.test(navigator.platform),function(){return n}),s.isWebViewAndroid=(i=-1!==navigator.userAgent.indexOf("Version")&&-1!==navigator.userAgent.indexOf("Android")&&-1!==navigator.userAgent.indexOf("Chrome"),function(){return i}),s.isSafari=(r=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),function(){return r}),s.isFirefoxAndroid=(o=-1!==navigator.userAgent.indexOf("Firefox")&&-1!==navigator.userAgent.indexOf("Android"),function(){return o}),s.isR7=(a=-1!==navigator.userAgent.indexOf("R7 Build"),function(){return a}),s.isLandscapeMode=function(){var t=90==window.orientation||-90==window.orientation;return s.isR7()?!t:t},s.isTimestampDeltaValid=function(t){return!isNaN(t)&&(!(t<=s.MIN_TIMESTEP)&&!(t>s.MAX_TIMESTEP))},s.getScreenWidth=function(){return Math.max(window.screen.width,window.screen.height)*window.devicePixelRatio},s.getScreenHeight=function(){return Math.min(window.screen.width,window.screen.height)*window.devicePixelRatio},s.requestFullscreen=function(t){if(s.isWebViewAndroid())return!1;if(t.requestFullscreen)t.requestFullscreen();else if(t.webkitRequestFullscreen)t.webkitRequestFullscreen();else if(t.mozRequestFullScreen)t.mozRequestFullScreen();else{if(!t.msRequestFullscreen)return!1;t.msRequestFullscreen()}return!0},s.exitFullscreen=function(){if(document.exitFullscreen)document.exitFullscreen();else if(document.webkitExitFullscreen)document.webkitExitFullscreen();else if(document.mozCancelFullScreen)document.mozCancelFullScreen();else{if(!document.msExitFullscreen)return!1;document.msExitFullscreen()}return!0},s.getFullscreenElement=function(){return document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement},s.linkProgram=function(t,e,n,i){var r=t.createShader(t.VERTEX_SHADER);t.shaderSource(r,e),t.compileShader(r);var o=t.createShader(t.FRAGMENT_SHADER);t.shaderSource(o,n),t.compileShader(o);var a=t.createProgram();for(var s in t.attachShader(a,r),t.attachShader(a,o),i)t.bindAttribLocation(a,i[s],s);return t.linkProgram(a),t.deleteShader(r),t.deleteShader(o),a},s.getProgramUniforms=function(t,e){for(var n={},i=t.getProgramParameter(e,t.ACTIVE_UNIFORMS),r="",o=0;o<i;o++){n[r=t.getActiveUniform(e,o).name.replace("[0]","")]=t.getUniformLocation(e,r)}return n},s.orthoMatrix=function(t,e,n,i,r,o,a){var s=1/(e-n),u=1/(i-r),h=1/(o-a);return t[0]=-2*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*h,t[11]=0,t[12]=(e+n)*s,t[13]=(r+i)*u,t[14]=(a+o)*h,t[15]=1,t},s.copyArray=function(t,e){for(var n=0,i=t.length;n<i;n++)e[n]=t[n]},s.isMobile=function(){var t,e=!1;return t=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e},s.extend=function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},s.safariCssSizeWorkaround=function(t){if(s.isIOS()){var e=t.style.width,n=t.style.height;t.style.width=parseInt(e)+1+"px",t.style.height=parseInt(n)+"px",setTimeout((function(){t.style.width=e,t.style.height=n}),100)}window.Util=s,window.canvas=t},s.isDebug=function(){return s.getQueryParameter("debug")},s.getQueryParameter=function(t){t=t.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var e=new RegExp("[\\?&]"+t+"=([^&#]*)").exec(location.search);return null===e?"":decodeURIComponent(e[1].replace(/\+/g," "))},s.frameDataFromPose=function(){var t=Math.PI/180,e=.25*Math.PI;var n=new Float32Array([0,0,0,1]),i=new Float32Array([0,0,0]);function r(r,o,a,s,u){var h,c,l,f,d,p,v,m,g,_;h=r,c=s?s.fieldOfView:null,l=u.depthNear,f=u.depthFar,d=Math.tan(c?c.upDegrees*t:e),p=Math.tan(c?c.downDegrees*t:e),v=Math.tan(c?c.leftDegrees*t:e),m=Math.tan(c?c.rightDegrees*t:e),g=2/(v+m),_=2/(d+p),h[0]=g,h[1]=0,h[2]=0,h[3]=0,h[4]=0,h[5]=_,h[6]=0,h[7]=0,h[8]=-(v-m)*g*.5,h[9]=(d-p)*_*.5,h[10]=f/(l-f),h[11]=-1,h[12]=0,h[13]=0,h[14]=f*l/(l-f),h[15]=0,function(t,e,n){var i=e[0],r=e[1],o=e[2],a=e[3],s=i+i,u=r+r,h=o+o,c=i*s,l=i*u,f=i*h,d=r*u,p=r*h,v=o*h,m=a*s,g=a*u,_=a*h;t[0]=1-(d+v),t[1]=l+_,t[2]=f-g,t[3]=0,t[4]=l-_,t[5]=1-(c+v),t[6]=p+m,t[7]=0,t[8]=f+g,t[9]=p-m,t[10]=1-(c+d),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1}(o,a.orientation||n,a.position||i),s&&function(t,e,n){var i,r,o,a,s,u,h,c,l,f,d,p,v=n[0],m=n[1],g=n[2];e===t?(t[12]=e[0]*v+e[4]*m+e[8]*g+e[12],t[13]=e[1]*v+e[5]*m+e[9]*g+e[13],t[14]=e[2]*v+e[6]*m+e[10]*g+e[14],t[15]=e[3]*v+e[7]*m+e[11]*g+e[15]):(i=e[0],r=e[1],o=e[2],a=e[3],s=e[4],u=e[5],h=e[6],c=e[7],l=e[8],f=e[9],d=e[10],p=e[11],t[0]=i,t[1]=r,t[2]=o,t[3]=a,t[4]=s,t[5]=u,t[6]=h,t[7]=c,t[8]=l,t[9]=f,t[10]=d,t[11]=p,t[12]=i*v+s*m+l*g+e[12],t[13]=r*v+u*m+f*g+e[13],t[14]=o*v+h*m+d*g+e[14],t[15]=a*v+c*m+p*g+e[15])}(o,o,s.offset),function(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=e[4],s=e[5],u=e[6],h=e[7],c=e[8],l=e[9],f=e[10],d=e[11],p=e[12],v=e[13],m=e[14],g=e[15],_=n*s-i*a,y=n*u-r*a,x=n*h-o*a,w=i*u-r*s,E=i*h-o*s,T=r*h-o*u,M=c*v-l*p,b=c*m-f*p,R=c*g-d*p,P=l*m-f*v,A=l*g-d*v,I=f*g-d*m,O=_*I-y*A+x*P+w*R-E*b+T*M;O&&(O=1/O,t[0]=(s*I-u*A+h*P)*O,t[1]=(r*A-i*I-o*P)*O,t[2]=(v*T-m*E+g*w)*O,t[3]=(f*E-l*T-d*w)*O,t[4]=(u*R-a*I-h*b)*O,t[5]=(n*I-r*R+o*b)*O,t[6]=(m*x-p*T-g*y)*O,t[7]=(c*T-f*x+d*y)*O,t[8]=(a*A-s*R+h*M)*O,t[9]=(i*R-n*A-o*M)*O,t[10]=(p*E-v*x+g*_)*O,t[11]=(l*x-c*E-d*_)*O,t[12]=(s*b-a*P-u*M)*O,t[13]=(n*P-i*b+r*M)*O,t[14]=(v*y-p*w-m*_)*O,t[15]=(c*w-l*y+f*_)*O)}(o,o)}return function(t,e,n){return!(!t||!e)&&(t.pose=e,t.timestamp=e.timestamp,r(t.leftProjectionMatrix,t.leftViewMatrix,e,n.getEyeParameters("left"),n),r(t.rightProjectionMatrix,t.rightViewMatrix,e,n.getEyeParameters("right"),n),!0)}}(),s.isInsideCrossDomainIFrame=function(){var t=window.self!==window.top,e=s.getDomainFromUrl(document.referrer),n=s.getDomainFromUrl(window.location.href);return t&&e!==n},s.getDomainFromUrl=function(t){return(t.indexOf("://")>-1?t.split("/")[2]:t.split("/")[0]).split(":")[0]},t.exports=s},function(t,e,n){(function(e,n){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */var i;i=function(){"use strict";function t(t){return"function"==typeof t}var i=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},r=0,o=void 0,a=void 0,s=function(t,e){p[r]=t,p[r+1]=e,2===(r+=2)&&(a?a(v):x())},u="undefined"!=typeof window?window:void 0,h=u||{},c=h.MutationObserver||h.WebKitMutationObserver,l="undefined"==typeof self&&void 0!==e&&"[object process]"==={}.toString.call(e),f="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function d(){var t=setTimeout;return function(){return t(v,1)}}var p=new Array(1e3);function v(){for(var t=0;t<r;t+=2)(0,p[t])(p[t+1]),p[t]=void 0,p[t+1]=void 0;r=0}var m,g,_,y,x=void 0;function w(t,e){var n=this,i=new this.constructor(M);void 0===i[T]&&L(i);var r=n._state;if(r){var o=arguments[r-1];s((function(){return C(r,i,o,n._result)}))}else O(n,i,t,e);return i}function E(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(M);return R(e,t),e}l?x=function(){return e.nextTick(v)}:c?(g=0,_=new c(v),y=document.createTextNode(""),_.observe(y,{characterData:!0}),x=function(){y.data=g=++g%2}):f?((m=new MessageChannel).port1.onmessage=v,x=function(){return m.port2.postMessage(0)}):x=void 0===u?function(){try{var t=Function("return this")().require("vertx");return void 0!==(o=t.runOnLoop||t.runOnContext)?function(){o(v)}:d()}catch(t){return d()}}():d();var T=Math.random().toString(36).substring(2);function M(){}function b(e,n,i){n.constructor===e.constructor&&i===w&&n.constructor.resolve===E?function(t,e){1===e._state?A(t,e._result):2===e._state?I(t,e._result):O(e,void 0,(function(e){return R(t,e)}),(function(e){return I(t,e)}))}(e,n):void 0===i?A(e,n):t(i)?function(t,e,n){s((function(t){var i=!1,r=function(t,e,n,i){try{t.call(e,n,i)}catch(t){return t}}(n,e,(function(n){i||(i=!0,e!==n?R(t,n):A(t,n))}),(function(e){i||(i=!0,I(t,e))}),t._label);!i&&r&&(i=!0,I(t,r))}),t)}(e,n,i):A(e,n)}function R(t,e){if(t===e)I(t,new TypeError("You cannot resolve a promise with itself"));else if(r=typeof(i=e),null===i||"object"!==r&&"function"!==r)A(t,e);else{var n=void 0;try{n=e.then}catch(e){return void I(t,e)}b(t,e,n)}var i,r}function P(t){t._onerror&&t._onerror(t._result),S(t)}function A(t,e){void 0===t._state&&(t._result=e,t._state=1,0!==t._subscribers.length&&s(S,t))}function I(t,e){void 0===t._state&&(t._state=2,t._result=e,s(P,t))}function O(t,e,n,i){var r=t._subscribers,o=r.length;t._onerror=null,r[o]=e,r[o+1]=n,r[o+2]=i,0===o&&t._state&&s(S,t)}function S(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var i=void 0,r=void 0,o=t._result,a=0;a<e.length;a+=3)i=e[a],r=e[a+n],i?C(n,i,r,o):r(o);t._subscribers.length=0}}function C(e,n,i,r){var o=t(i),a=void 0,s=void 0,u=!0;if(o){try{a=i(r)}catch(t){u=!1,s=t}if(n===a)return void I(n,new TypeError("A promises callback cannot return that same promise."))}else a=r;void 0!==n._state||(o&&u?R(n,a):!1===u?I(n,s):1===e?A(n,a):2===e&&I(n,a))}var D=0;function L(t){t[T]=D++,t._state=void 0,t._result=void 0,t._subscribers=[]}var F=function(){function t(t,e){this._instanceConstructor=t,this.promise=new t(M),this.promise[T]||L(this.promise),i(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?A(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&A(this.promise,this._result))):I(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;void 0===this._state&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,i=n.resolve;if(i===E){var r=void 0,o=void 0,a=!1;try{r=t.then}catch(t){a=!0,o=t}if(r===w&&void 0!==t._state)this._settledAt(t._state,e,t._result);else if("function"!=typeof r)this._remaining--,this._result[e]=t;else if(n===V){var s=new n(M);a?I(s,o):b(s,t,r),this._willSettleAt(s,e)}else this._willSettleAt(new n((function(e){return e(t)})),e)}else this._willSettleAt(i(t),e)},t.prototype._settledAt=function(t,e,n){var i=this.promise;void 0===i._state&&(this._remaining--,2===t?I(i,n):this._result[e]=n),0===this._remaining&&A(i,this._result)},t.prototype._willSettleAt=function(t,e){var n=this;O(t,void 0,(function(t){return n._settledAt(1,e,t)}),(function(t){return n._settledAt(2,e,t)}))},t}(),V=function(){function e(t){this[T]=D++,this._result=this._state=void 0,this._subscribers=[],M!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e((function(e){R(t,e)}),(function(e){I(t,e)}))}catch(e){I(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var n=this.constructor;return t(e)?this.then((function(t){return n.resolve(e()).then((function(){return t}))}),(function(t){return n.resolve(e()).then((function(){throw t}))})):this.then(e,e)},e}();return V.prototype.then=w,V.all=function(t){return new F(this,t).promise},V.race=function(t){var e=this;return i(t)?new e((function(n,i){for(var r=t.length,o=0;o<r;o++)e.resolve(t[o]).then(n,i)})):new e((function(t,e){return e(new TypeError("You must pass an array to race."))}))},V.resolve=E,V.reject=function(t){var e=new this(M);return I(e,t),e},V._setScheduler=function(t){a=t},V._setAsap=function(t){s=t},V._asap=s,V.polyfill=function(){var t=void 0;if(void 0!==n)t=n;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var i=null;try{i=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===i&&!e.cast)return}t.Promise=V},V.Promise=V,V},t.exports=i()}).call(this,n(9),n(10))},function(t,e,n){var i=n(8),r=n(0),o=n(1);function a(t){this.kFilter=t,this.currentAccelMeasurement=new i,this.currentGyroMeasurement=new i,this.previousGyroMeasurement=new i,o.isIOS()?this.filterQ=new r.Quaternion(-1,0,0,1):this.filterQ=new r.Quaternion(1,0,0,1),this.previousFilterQ=new r.Quaternion,this.previousFilterQ.copy(this.filterQ),this.accelQ=new r.Quaternion,this.isOrientationInitialized=!1,this.estimatedGravity=new r.Vector3,this.measuredGravity=new r.Vector3,this.gyroIntegralQ=new r.Quaternion}a.prototype.addAccelMeasurement=function(t,e){this.currentAccelMeasurement.set(t,e)},a.prototype.addGyroMeasurement=function(t,e){this.currentGyroMeasurement.set(t,e);var n=e-this.previousGyroMeasurement.timestampS;o.isTimestampDeltaValid(n)&&this.run_(),this.previousGyroMeasurement.copy(this.currentGyroMeasurement)},a.prototype.run_=function(){if(!this.isOrientationInitialized)return this.accelQ=this.accelToQuaternion_(this.currentAccelMeasurement.sample),this.previousFilterQ.copy(this.accelQ),void(this.isOrientationInitialized=!0);var t=this.currentGyroMeasurement.timestampS-this.previousGyroMeasurement.timestampS,e=this.gyroToQuaternionDelta_(this.currentGyroMeasurement.sample,t);this.gyroIntegralQ.multiply(e),this.filterQ.copy(this.previousFilterQ),this.filterQ.multiply(e);var n=new r.Quaternion;n.copy(this.filterQ),n.inverse(),this.estimatedGravity.set(0,0,-1),this.estimatedGravity.applyQuaternion(n),this.estimatedGravity.normalize(),this.measuredGravity.copy(this.currentAccelMeasurement.sample),this.measuredGravity.normalize();var i=new r.Quaternion;i.setFromUnitVectors(this.estimatedGravity,this.measuredGravity),i.inverse(),o.isDebug()&&console.log("Delta: %d deg, G_est: (%s, %s, %s), G_meas: (%s, %s, %s)",r.radToDeg*o.getQuaternionAngle(i),this.estimatedGravity.x.toFixed(1),this.estimatedGravity.y.toFixed(1),this.estimatedGravity.z.toFixed(1),this.measuredGravity.x.toFixed(1),this.measuredGravity.y.toFixed(1),this.measuredGravity.z.toFixed(1));var a=new r.Quaternion;a.copy(this.filterQ),a.multiply(i),this.filterQ.slerp(a,1-this.kFilter),this.previousFilterQ.copy(this.filterQ)},a.prototype.getOrientation=function(){return this.filterQ},a.prototype.accelToQuaternion_=function(t){var e=new r.Vector3;e.copy(t),e.normalize();var n=new r.Quaternion;return n.setFromUnitVectors(new r.Vector3(0,0,-1),e),n.inverse(),n},a.prototype.gyroToQuaternionDelta_=function(t,e){var n=new r.Quaternion,i=new r.Vector3;return i.copy(t),i.normalize(),n.setFromAxisAngle(i,t.length()*e),n},t.exports=a},function(t,e,n){var i=n(0),r=n(1);function o(t){this.predictionTimeS=t,this.previousQ=new i.Quaternion,this.previousTimestampS=null,this.deltaQ=new i.Quaternion,this.outQ=new i.Quaternion}o.prototype.getPrediction=function(t,e,n){if(!this.previousTimestampS)return this.previousQ.copy(t),this.previousTimestampS=n,t;var o=new i.Vector3;o.copy(e),o.normalize();var a=e.length();if(a<20*i.degToRad)return r.isDebug()&&console.log("Moving slowly, at %s deg/s: no prediction",(i.radToDeg*a).toFixed(1)),this.outQ.copy(t),this.previousQ.copy(t),this.outQ;this.previousTimestampS;var s=a*this.predictionTimeS;return this.deltaQ.setFromAxisAngle(o,s),this.outQ.copy(this.previousQ),this.outQ.multiply(this.deltaQ),this.previousQ.copy(t),this.previousTimestampS=n,this.outQ},t.exports=o},,,,function(t,e){function n(t,e){this.set(t,e)}n.prototype.set=function(t,e){this.sample=t,this.timestampS=e},n.prototype.copy=function(t){this.set(t.sample,t.timestampS)},t.exports=n},function(t,e){var n,i,r=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(t){i=a}}();var u,h=[],c=!1,l=-1;function f(){c&&u&&(c=!1,u.length?h=u.concat(h):l=-1,h.length&&d())}function d(){if(!c){var t=s(f);c=!0;for(var e=h.length;e;){for(u=h,h=[];++l<e;)u&&u[l].run();l=-1,e=h.length}u=null,c=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function v(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];h.push(new p(t,e)),1!==h.length||c||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);var i={};n.r(i),n.d(i,"EPSILON",(function(){return z})),n.d(i,"ARRAY_TYPE",(function(){return Q})),n.d(i,"RANDOM",(function(){return W})),n.d(i,"setMatrixArrayType",(function(){return k})),n.d(i,"toRadian",(function(){return X})),n.d(i,"equals",(function(){return q}));var r={};n.r(r),n.d(r,"create",(function(){return B})),n.d(r,"fromMat4",(function(){return G})),n.d(r,"clone",(function(){return H})),n.d(r,"copy",(function(){return j})),n.d(r,"fromValues",(function(){return K})),n.d(r,"set",(function(){return Z})),n.d(r,"identity",(function(){return J})),n.d(r,"transpose",(function(){return $})),n.d(r,"invert",(function(){return tt})),n.d(r,"adjoint",(function(){return et})),n.d(r,"determinant",(function(){return nt})),n.d(r,"multiply",(function(){return it})),n.d(r,"translate",(function(){return rt})),n.d(r,"rotate",(function(){return ot})),n.d(r,"scale",(function(){return at})),n.d(r,"fromTranslation",(function(){return st})),n.d(r,"fromRotation",(function(){return ut})),n.d(r,"fromScaling",(function(){return ht})),n.d(r,"fromMat2d",(function(){return ct})),n.d(r,"fromQuat",(function(){return lt})),n.d(r,"normalFromMat4",(function(){return ft})),n.d(r,"projection",(function(){return dt})),n.d(r,"str",(function(){return pt})),n.d(r,"frob",(function(){return vt})),n.d(r,"add",(function(){return mt})),n.d(r,"subtract",(function(){return gt})),n.d(r,"multiplyScalar",(function(){return _t})),n.d(r,"multiplyScalarAndAdd",(function(){return yt})),n.d(r,"exactEquals",(function(){return xt})),n.d(r,"equals",(function(){return wt})),n.d(r,"mul",(function(){return Et})),n.d(r,"sub",(function(){return Tt}));var o={};n.r(o),n.d(o,"create",(function(){return Mt})),n.d(o,"clone",(function(){return bt})),n.d(o,"copy",(function(){return Rt})),n.d(o,"fromValues",(function(){return Pt})),n.d(o,"set",(function(){return At})),n.d(o,"identity",(function(){return It})),n.d(o,"transpose",(function(){return Ot})),n.d(o,"invert",(function(){return St})),n.d(o,"adjoint",(function(){return Ct})),n.d(o,"determinant",(function(){return Dt})),n.d(o,"multiply",(function(){return Lt})),n.d(o,"translate",(function(){return Ft})),n.d(o,"scale",(function(){return Vt})),n.d(o,"rotate",(function(){return Nt})),n.d(o,"rotateX",(function(){return Ut})),n.d(o,"rotateY",(function(){return zt})),n.d(o,"rotateZ",(function(){return Qt})),n.d(o,"fromTranslation",(function(){return Wt})),n.d(o,"fromScaling",(function(){return kt})),n.d(o,"fromRotation",(function(){return Yt})),n.d(o,"fromXRotation",(function(){return Xt})),n.d(o,"fromYRotation",(function(){return qt})),n.d(o,"fromZRotation",(function(){return Bt})),n.d(o,"fromRotationTranslation",(function(){return Gt})),n.d(o,"fromQuat2",(function(){return Ht})),n.d(o,"getTranslation",(function(){return jt})),n.d(o,"getScaling",(function(){return Kt})),n.d(o,"getRotation",(function(){return Zt})),n.d(o,"fromRotationTranslationScale",(function(){return Jt})),n.d(o,"fromRotationTranslationScaleOrigin",(function(){return $t})),n.d(o,"fromQuat",(function(){return te})),n.d(o,"frustum",(function(){return ee})),n.d(o,"perspective",(function(){return ne})),n.d(o,"perspectiveFromFieldOfView",(function(){return ie})),n.d(o,"ortho",(function(){return re})),n.d(o,"lookAt",(function(){return oe})),n.d(o,"targetTo",(function(){return ae})),n.d(o,"str",(function(){return se})),n.d(o,"frob",(function(){return ue})),n.d(o,"add",(function(){return he})),n.d(o,"subtract",(function(){return ce})),n.d(o,"multiplyScalar",(function(){return le})),n.d(o,"multiplyScalarAndAdd",(function(){return fe})),n.d(o,"exactEquals",(function(){return de})),n.d(o,"equals",(function(){return pe})),n.d(o,"mul",(function(){return ve})),n.d(o,"sub",(function(){return me}));var a={};n.r(a),n.d(a,"create",(function(){return ge})),n.d(a,"clone",(function(){return _e})),n.d(a,"length",(function(){return ye})),n.d(a,"fromValues",(function(){return xe})),n.d(a,"copy",(function(){return we})),n.d(a,"set",(function(){return Ee})),n.d(a,"add",(function(){return Te})),n.d(a,"subtract",(function(){return Me})),n.d(a,"multiply",(function(){return be})),n.d(a,"divide",(function(){return Re})),n.d(a,"ceil",(function(){return Pe})),n.d(a,"floor",(function(){return Ae})),n.d(a,"min",(function(){return Ie})),n.d(a,"max",(function(){return Oe})),n.d(a,"round",(function(){return Se})),n.d(a,"scale",(function(){return Ce})),n.d(a,"scaleAndAdd",(function(){return De})),n.d(a,"distance",(function(){return Le})),n.d(a,"squaredDistance",(function(){return Fe})),n.d(a,"squaredLength",(function(){return Ve})),n.d(a,"negate",(function(){return Ne})),n.d(a,"inverse",(function(){return Ue})),n.d(a,"normalize",(function(){return ze})),n.d(a,"dot",(function(){return Qe})),n.d(a,"cross",(function(){return We})),n.d(a,"lerp",(function(){return ke})),n.d(a,"hermite",(function(){return Ye})),n.d(a,"bezier",(function(){return Xe})),n.d(a,"random",(function(){return qe})),n.d(a,"transformMat4",(function(){return Be})),n.d(a,"transformMat3",(function(){return Ge})),n.d(a,"transformQuat",(function(){return He})),n.d(a,"rotateX",(function(){return je})),n.d(a,"rotateY",(function(){return Ke})),n.d(a,"rotateZ",(function(){return Ze})),n.d(a,"angle",(function(){return Je})),n.d(a,"zero",(function(){return $e})),n.d(a,"str",(function(){return tn})),n.d(a,"exactEquals",(function(){return en})),n.d(a,"equals",(function(){return nn})),n.d(a,"sub",(function(){return on})),n.d(a,"mul",(function(){return an})),n.d(a,"div",(function(){return sn})),n.d(a,"dist",(function(){return un})),n.d(a,"sqrDist",(function(){return hn})),n.d(a,"len",(function(){return cn})),n.d(a,"sqrLen",(function(){return ln})),n.d(a,"forEach",(function(){return fn}));var s={};n.r(s),n.d(s,"create",(function(){return vn})),n.d(s,"identity",(function(){return mn})),n.d(s,"setAxisAngle",(function(){return gn})),n.d(s,"getAxisAngle",(function(){return _n})),n.d(s,"getAngle",(function(){return yn})),n.d(s,"multiply",(function(){return xn})),n.d(s,"rotateX",(function(){return wn})),n.d(s,"rotateY",(function(){return En})),n.d(s,"rotateZ",(function(){return Tn})),n.d(s,"calculateW",(function(){return Mn})),n.d(s,"exp",(function(){return bn})),n.d(s,"ln",(function(){return Rn})),n.d(s,"pow",(function(){return Pn})),n.d(s,"slerp",(function(){return An})),n.d(s,"random",(function(){return In})),n.d(s,"invert",(function(){return On})),n.d(s,"conjugate",(function(){return Sn})),n.d(s,"fromMat3",(function(){return Cn})),n.d(s,"fromEuler",(function(){return Dn})),n.d(s,"str",(function(){return Ln})),n.d(s,"clone",(function(){return Wn})),n.d(s,"fromValues",(function(){return kn})),n.d(s,"copy",(function(){return Yn})),n.d(s,"set",(function(){return Xn})),n.d(s,"add",(function(){return qn})),n.d(s,"mul",(function(){return Bn})),n.d(s,"scale",(function(){return Gn})),n.d(s,"dot",(function(){return Hn})),n.d(s,"lerp",(function(){return jn})),n.d(s,"length",(function(){return Kn})),n.d(s,"len",(function(){return Zn})),n.d(s,"squaredLength",(function(){return Jn})),n.d(s,"sqrLen",(function(){return $n})),n.d(s,"normalize",(function(){return ti})),n.d(s,"exactEquals",(function(){return ei})),n.d(s,"equals",(function(){return ni})),n.d(s,"rotationTo",(function(){return ii})),n.d(s,"sqlerp",(function(){return ri})),n.d(s,"setAxes",(function(){return oi}));var u={};n.r(u),n.d(u,"create",(function(){return ai})),n.d(u,"clone",(function(){return si})),n.d(u,"fromValues",(function(){return ui})),n.d(u,"copy",(function(){return hi})),n.d(u,"set",(function(){return ci})),n.d(u,"add",(function(){return li})),n.d(u,"subtract",(function(){return fi})),n.d(u,"multiply",(function(){return di})),n.d(u,"divide",(function(){return pi})),n.d(u,"ceil",(function(){return vi})),n.d(u,"floor",(function(){return mi})),n.d(u,"min",(function(){return gi})),n.d(u,"max",(function(){return _i})),n.d(u,"round",(function(){return yi})),n.d(u,"scale",(function(){return xi})),n.d(u,"scaleAndAdd",(function(){return wi})),n.d(u,"distance",(function(){return Ei})),n.d(u,"squaredDistance",(function(){return Ti})),n.d(u,"length",(function(){return Mi})),n.d(u,"squaredLength",(function(){return bi})),n.d(u,"negate",(function(){return Ri})),n.d(u,"inverse",(function(){return Pi})),n.d(u,"normalize",(function(){return Ai})),n.d(u,"dot",(function(){return Ii})),n.d(u,"cross",(function(){return Oi})),n.d(u,"lerp",(function(){return Si})),n.d(u,"random",(function(){return Ci})),n.d(u,"transformMat2",(function(){return Di})),n.d(u,"transformMat2d",(function(){return Li})),n.d(u,"transformMat3",(function(){return Fi})),n.d(u,"transformMat4",(function(){return Vi})),n.d(u,"rotate",(function(){return Ni})),n.d(u,"angle",(function(){return Ui})),n.d(u,"zero",(function(){return zi})),n.d(u,"str",(function(){return Qi})),n.d(u,"exactEquals",(function(){return Wi})),n.d(u,"equals",(function(){return ki})),n.d(u,"len",(function(){return Yi})),n.d(u,"sub",(function(){return Xi})),n.d(u,"mul",(function(){return qi})),n.d(u,"div",(function(){return Bi})),n.d(u,"dist",(function(){return Gi})),n.d(u,"sqrDist",(function(){return Hi})),n.d(u,"sqrLen",(function(){return ji})),n.d(u,"forEach",(function(){return Ki}));var h=n(4),c=n.n(h),l=n(1),f=n.n(l),d=n(0),p=n.n(d),v=n(3),m=n.n(v),g="undefined"!=typeof window&&window||{},_=(g.RegExp,g.navigator),y=[{criteria:"PhantomJS",identity:"PhantomJS"},{criteria:/Whale/,identity:"Whale",versionSearch:"Whale"},{criteria:/Edge/,identity:"Edge",versionSearch:"Edge"},{criteria:/MSIE|Trident|Windows Phone/,identity:"IE",versionSearch:"IEMobile|MSIE|rv"},{criteria:/MiuiBrowser/,identity:"MIUI Browser",versionSearch:"MiuiBrowser"},{criteria:/SamsungBrowser/,identity:"Samsung Internet",versionSearch:"SamsungBrowser"},{criteria:/SAMSUNG /,identity:"Samsung Internet",versionSearch:"Version"},{criteria:/Chrome|CriOS/,identity:"Chrome"},{criteria:/Android/,identity:"Android Browser",versionSearch:"Version"},{criteria:/iPhone|iPad/,identity:"Safari",versionSearch:"Version"},{criteria:"Apple",identity:"Safari",versionSearch:"Version"},{criteria:"Firefox",identity:"Firefox"}],x=[{criteria:/Windows Phone/,identity:"Windows Phone",versionSearch:"Windows Phone"},{criteria:"Windows 2000",identity:"Window",versionAlias:"5.0"},{criteria:/Windows NT/,identity:"Window",versionSearch:"Windows NT"},{criteria:/iPhone|iPad/,identity:"iOS",versionSearch:"iPhone OS|CPU OS"},{criteria:"Mac",versionSearch:"OS X",identity:"MAC"},{criteria:/Android/,identity:"Android"},{criteria:/Tizen/,identity:"Tizen"},{criteria:/Web0S/,identity:"WebOS"}],w=[{criteria:/iPhone|iPad/,browserVersionSearch:"Version",webviewBrowserVersion:/-1/},{criteria:/iPhone|iPad|Android/,webviewToken:/NAVER|DAUM|; wv/}],E={browser:{version:"-1",name:"unknown"},os:{version:"-1",name:"unknown"}};function T(t,e){for(var n=[],i=0;i<t.length;i++)e(t[i])&&n.push(t[i]);return n}var M=void 0;function b(t){M=t}function R(t,e){return e&&e.test?!!e.test(t):t.indexOf(e)>-1}function P(t,e){var n=T(t,(function(t){return R(M,t.criteria)}))[0];return n&&n.identity||e.name}function A(t,e){return T(t,(function(t){var n=t.criteria,i=new RegExp(t.identity,"i").test(e);return!!(n?i&&R(M,n):i)}))[0]}function I(t,e){var n=E.browser.version,i=new RegExp("("+t+")","i").exec(e);if(!i)return n;var r=i.index,o=i[0];if(r>-1){var a=r+o.length+1;n=e.substring(a).split(" ")[0].replace(/_/g,".").replace(/;|\)/g,"")}return n}function O(t){if(t)return I(function(t){var e=A(y,t);return e||(e={criteria:t,versionSearch:t,identity:t}),e}(t).versionSearch||t,M)}function S(t){var e=function(t){return A(x,t)}(t)||{},n=E.os.version,i=void 0;if(t){if(e.versionAlias)return e.versionAlias;var r=e.versionSearch||t,o=new RegExp("("+r+")\\s([\\d_\\.]+|\\d_0)","i");return o.exec(M)&&(i=o.exec(M)[2].replace(/_/g,".").replace(/;|\)/g,"")),i||n}}function C(){var t=P(x,E.os);return{name:t,version:S(t)}}function D(){var t,e=P(y,E.browser);return{name:e,version:O(e),webview:(t=void 0,function(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return!0;return!1}(T(w,(function(t){return R(M,t.criteria)})),(function(e){return t=I(e.browserVersionSearch,M),!(!R(M,e.webviewToken)&&!R(t,e.webviewBrowserVersion))})))}}function L(){return-1!==M.indexOf("Mobi")}function F(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_.userAgent;b(t);var e={os:C(),browser:D(),isMobile:L()};return e.browser.name=e.browser.name.toLowerCase(),e.os.name=e.os.name.toLowerCase(),e.os.version=e.os.version.toLowerCase(),"ios"===e.os.name&&e.browser.webview&&(e.browser.version="-1"),e}F.VERSION="2.1.5";var V=F,N=n(2),U=n.n(N),z=1e-6,Q="undefined"!=typeof Float32Array?Float32Array:Array,W=Math.random;function k(t){Q=t}var Y=Math.PI/180;function X(t){return t*Y}function q(t,e){return Math.abs(t-e)<=z*Math.max(1,Math.abs(t),Math.abs(e))}function B(){var t=new Q(9);return Q!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function G(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function H(t){var e=new Q(9);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function j(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function K(t,e,n,i,r,o,a,s,u){var h=new Q(9);return h[0]=t,h[1]=e,h[2]=n,h[3]=i,h[4]=r,h[5]=o,h[6]=a,h[7]=s,h[8]=u,h}function Z(t,e,n,i,r,o,a,s,u,h){return t[0]=e,t[1]=n,t[2]=i,t[3]=r,t[4]=o,t[5]=a,t[6]=s,t[7]=u,t[8]=h,t}function J(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function $(t,e){if(t===e){var n=e[1],i=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=n,t[5]=e[7],t[6]=i,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function tt(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=e[4],s=e[5],u=e[6],h=e[7],c=e[8],l=c*a-s*h,f=-c*o+s*u,d=h*o-a*u,p=n*l+i*f+r*d;return p?(p=1/p,t[0]=l*p,t[1]=(-c*i+r*h)*p,t[2]=(s*i-r*a)*p,t[3]=f*p,t[4]=(c*n-r*u)*p,t[5]=(-s*n+r*o)*p,t[6]=d*p,t[7]=(-h*n+i*u)*p,t[8]=(a*n-i*o)*p,t):null}function et(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=e[4],s=e[5],u=e[6],h=e[7],c=e[8];return t[0]=a*c-s*h,t[1]=r*h-i*c,t[2]=i*s-r*a,t[3]=s*u-o*c,t[4]=n*c-r*u,t[5]=r*o-n*s,t[6]=o*h-a*u,t[7]=i*u-n*h,t[8]=n*a-i*o,t}function nt(t){var e=t[0],n=t[1],i=t[2],r=t[3],o=t[4],a=t[5],s=t[6],u=t[7],h=t[8];return e*(h*o-a*u)+n*(-h*r+a*s)+i*(u*r-o*s)}function it(t,e,n){var i=e[0],r=e[1],o=e[2],a=e[3],s=e[4],u=e[5],h=e[6],c=e[7],l=e[8],f=n[0],d=n[1],p=n[2],v=n[3],m=n[4],g=n[5],_=n[6],y=n[7],x=n[8];return t[0]=f*i+d*a+p*h,t[1]=f*r+d*s+p*c,t[2]=f*o+d*u+p*l,t[3]=v*i+m*a+g*h,t[4]=v*r+m*s+g*c,t[5]=v*o+m*u+g*l,t[6]=_*i+y*a+x*h,t[7]=_*r+y*s+x*c,t[8]=_*o+y*u+x*l,t}function rt(t,e,n){var i=e[0],r=e[1],o=e[2],a=e[3],s=e[4],u=e[5],h=e[6],c=e[7],l=e[8],f=n[0],d=n[1];return t[0]=i,t[1]=r,t[2]=o,t[3]=a,t[4]=s,t[5]=u,t[6]=f*i+d*a+h,t[7]=f*r+d*s+c,t[8]=f*o+d*u+l,t}function ot(t,e,n){var i=e[0],r=e[1],o=e[2],a=e[3],s=e[4],u=e[5],h=e[6],c=e[7],l=e[8],f=Math.sin(n),d=Math.cos(n);return t[0]=d*i+f*a,t[1]=d*r+f*s,t[2]=d*o+f*u,t[3]=d*a-f*i,t[4]=d*s-f*r,t[5]=d*u-f*o,t[6]=h,t[7]=c,t[8]=l,t}function at(t,e,n){var i=n[0],r=n[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function st(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t}function ut(t,e){var n=Math.sin(e),i=Math.cos(e);return t[0]=i,t[1]=n,t[2]=0,t[3]=-n,t[4]=i,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function ht(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function ct(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t}function lt(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=n+n,s=i+i,u=r+r,h=n*a,c=i*a,l=i*s,f=r*a,d=r*s,p=r*u,v=o*a,m=o*s,g=o*u;return t[0]=1-l-p,t[3]=c-g,t[6]=f+m,t[1]=c+g,t[4]=1-h-p,t[7]=d-v,t[2]=f-m,t[5]=d+v,t[8]=1-h-l,t}function ft(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=e[4],s=e[5],u=e[6],h=e[7],c=e[8],l=e[9],f=e[10],d=e[11],p=e[12],v=e[13],m=e[14],g=e[15],_=n*s-i*a,y=n*u-r*a,x=n*h-o*a,w=i*u-r*s,E=i*h-o*s,T=r*h-o*u,M=c*v-l*p,b=c*m-f*p,R=c*g-d*p,P=l*m-f*v,A=l*g-d*v,I=f*g-d*m,O=_*I-y*A+x*P+w*R-E*b+T*M;return O?(O=1/O,t[0]=(s*I-u*A+h*P)*O,t[1]=(u*R-a*I-h*b)*O,t[2]=(a*A-s*R+h*M)*O,t[3]=(r*A-i*I-o*P)*O,t[4]=(n*I-r*R+o*b)*O,t[5]=(i*R-n*A-o*M)*O,t[6]=(v*T-m*E+g*w)*O,t[7]=(m*x-p*T-g*y)*O,t[8]=(p*E-v*x+g*_)*O,t):null}function dt(t,e,n){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/n,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function pt(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"}function vt(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])}function mt(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t}function gt(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t}function _t(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t}function yt(t,e,n,i){return t[0]=e[0]+n[0]*i,t[1]=e[1]+n[1]*i,t[2]=e[2]+n[2]*i,t[3]=e[3]+n[3]*i,t[4]=e[4]+n[4]*i,t[5]=e[5]+n[5]*i,t[6]=e[6]+n[6]*i,t[7]=e[7]+n[7]*i,t[8]=e[8]+n[8]*i,t}function xt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]}function wt(t,e){var n=t[0],i=t[1],r=t[2],o=t[3],a=t[4],s=t[5],u=t[6],h=t[7],c=t[8],l=e[0],f=e[1],d=e[2],p=e[3],v=e[4],m=e[5],g=e[6],_=e[7],y=e[8];return Math.abs(n-l)<=z*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(i-f)<=z*Math.max(1,Math.abs(i),Math.abs(f))&&Math.abs(r-d)<=z*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(o-p)<=z*Math.max(1,Math.abs(o),Math.abs(p))&&Math.abs(a-v)<=z*Math.max(1,Math.abs(a),Math.abs(v))&&Math.abs(s-m)<=z*Math.max(1,Math.abs(s),Math.abs(m))&&Math.abs(u-g)<=z*Math.max(1,Math.abs(u),Math.abs(g))&&Math.abs(h-_)<=z*Math.max(1,Math.abs(h),Math.abs(_))&&Math.abs(c-y)<=z*Math.max(1,Math.abs(c),Math.abs(y))}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var Et=it,Tt=gt;function Mt(){var t=new Q(16);return Q!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function bt(t){var e=new Q(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function Rt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Pt(t,e,n,i,r,o,a,s,u,h,c,l,f,d,p,v){var m=new Q(16);return m[0]=t,m[1]=e,m[2]=n,m[3]=i,m[4]=r,m[5]=o,m[6]=a,m[7]=s,m[8]=u,m[9]=h,m[10]=c,m[11]=l,m[12]=f,m[13]=d,m[14]=p,m[15]=v,m}function At(t,e,n,i,r,o,a,s,u,h,c,l,f,d,p,v,m){return t[0]=e,t[1]=n,t[2]=i,t[3]=r,t[4]=o,t[5]=a,t[6]=s,t[7]=u,t[8]=h,t[9]=c,t[10]=l,t[11]=f,t[12]=d,t[13]=p,t[14]=v,t[15]=m,t}function It(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Ot(t,e){if(t===e){var n=e[1],i=e[2],r=e[3],o=e[6],a=e[7],s=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=i,t[9]=o,t[11]=e[14],t[12]=r,t[13]=a,t[14]=s}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function St(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=e[4],s=e[5],u=e[6],h=e[7],c=e[8],l=e[9],f=e[10],d=e[11],p=e[12],v=e[13],m=e[14],g=e[15],_=n*s-i*a,y=n*u-r*a,x=n*h-o*a,w=i*u-r*s,E=i*h-o*s,T=r*h-o*u,M=c*v-l*p,b=c*m-f*p,R=c*g-d*p,P=l*m-f*v,A=l*g-d*v,I=f*g-d*m,O=_*I-y*A+x*P+w*R-E*b+T*M;return O?(O=1/O,t[0]=(s*I-u*A+h*P)*O,t[1]=(r*A-i*I-o*P)*O,t[2]=(v*T-m*E+g*w)*O,t[3]=(f*E-l*T-d*w)*O,t[4]=(u*R-a*I-h*b)*O,t[5]=(n*I-r*R+o*b)*O,t[6]=(m*x-p*T-g*y)*O,t[7]=(c*T-f*x+d*y)*O,t[8]=(a*A-s*R+h*M)*O,t[9]=(i*R-n*A-o*M)*O,t[10]=(p*E-v*x+g*_)*O,t[11]=(l*x-c*E-d*_)*O,t[12]=(s*b-a*P-u*M)*O,t[13]=(n*P-i*b+r*M)*O,t[14]=(v*y-p*w-m*_)*O,t[15]=(c*w-l*y+f*_)*O,t):null}function Ct(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=e[4],s=e[5],u=e[6],h=e[7],c=e[8],l=e[9],f=e[10],d=e[11],p=e[12],v=e[13],m=e[14],g=e[15];return t[0]=s*(f*g-d*m)-l*(u*g-h*m)+v*(u*d-h*f),t[1]=-(i*(f*g-d*m)-l*(r*g-o*m)+v*(r*d-o*f)),t[2]=i*(u*g-h*m)-s*(r*g-o*m)+v*(r*h-o*u),t[3]=-(i*(u*d-h*f)-s*(r*d-o*f)+l*(r*h-o*u)),t[4]=-(a*(f*g-d*m)-c*(u*g-h*m)+p*(u*d-h*f)),t[5]=n*(f*g-d*m)-c*(r*g-o*m)+p*(r*d-o*f),t[6]=-(n*(u*g-h*m)-a*(r*g-o*m)+p*(r*h-o*u)),t[7]=n*(u*d-h*f)-a*(r*d-o*f)+c*(r*h-o*u),t[8]=a*(l*g-d*v)-c*(s*g-h*v)+p*(s*d-h*l),t[9]=-(n*(l*g-d*v)-c*(i*g-o*v)+p*(i*d-o*l)),t[10]=n*(s*g-h*v)-a*(i*g-o*v)+p*(i*h-o*s),t[11]=-(n*(s*d-h*l)-a*(i*d-o*l)+c*(i*h-o*s)),t[12]=-(a*(l*m-f*v)-c*(s*m-u*v)+p*(s*f-u*l)),t[13]=n*(l*m-f*v)-c*(i*m-r*v)+p*(i*f-r*l),t[14]=-(n*(s*m-u*v)-a*(i*m-r*v)+p*(i*u-r*s)),t[15]=n*(s*f-u*l)-a*(i*f-r*l)+c*(i*u-r*s),t}function Dt(t){var e=t[0],n=t[1],i=t[2],r=t[3],o=t[4],a=t[5],s=t[6],u=t[7],h=t[8],c=t[9],l=t[10],f=t[11],d=t[12],p=t[13],v=t[14],m=t[15];return(e*a-n*o)*(l*m-f*v)-(e*s-i*o)*(c*m-f*p)+(e*u-r*o)*(c*v-l*p)+(n*s-i*a)*(h*m-f*d)-(n*u-r*a)*(h*v-l*d)+(i*u-r*s)*(h*p-c*d)}function Lt(t,e,n){var i=e[0],r=e[1],o=e[2],a=e[3],s=e[4],u=e[5],h=e[6],c=e[7],l=e[8],f=e[9],d=e[10],p=e[11],v=e[12],m=e[13],g=e[14],_=e[15],y=n[0],x=n[1],w=n[2],E=n[3];return t[0]=y*i+x*s+w*l+E*v,t[1]=y*r+x*u+w*f+E*m,t[2]=y*o+x*h+w*d+E*g,t[3]=y*a+x*c+w*p+E*_,y=n[4],x=n[5],w=n[6],E=n[7],t[4]=y*i+x*s+w*l+E*v,t[5]=y*r+x*u+w*f+E*m,t[6]=y*o+x*h+w*d+E*g,t[7]=y*a+x*c+w*p+E*_,y=n[8],x=n[9],w=n[10],E=n[11],t[8]=y*i+x*s+w*l+E*v,t[9]=y*r+x*u+w*f+E*m,t[10]=y*o+x*h+w*d+E*g,t[11]=y*a+x*c+w*p+E*_,y=n[12],x=n[13],w=n[14],E=n[15],t[12]=y*i+x*s+w*l+E*v,t[13]=y*r+x*u+w*f+E*m,t[14]=y*o+x*h+w*d+E*g,t[15]=y*a+x*c+w*p+E*_,t}function Ft(t,e,n){var i,r,o,a,s,u,h,c,l,f,d,p,v=n[0],m=n[1],g=n[2];return e===t?(t[12]=e[0]*v+e[4]*m+e[8]*g+e[12],t[13]=e[1]*v+e[5]*m+e[9]*g+e[13],t[14]=e[2]*v+e[6]*m+e[10]*g+e[14],t[15]=e[3]*v+e[7]*m+e[11]*g+e[15]):(i=e[0],r=e[1],o=e[2],a=e[3],s=e[4],u=e[5],h=e[6],c=e[7],l=e[8],f=e[9],d=e[10],p=e[11],t[0]=i,t[1]=r,t[2]=o,t[3]=a,t[4]=s,t[5]=u,t[6]=h,t[7]=c,t[8]=l,t[9]=f,t[10]=d,t[11]=p,t[12]=i*v+s*m+l*g+e[12],t[13]=r*v+u*m+f*g+e[13],t[14]=o*v+h*m+d*g+e[14],t[15]=a*v+c*m+p*g+e[15]),t}function Vt(t,e,n){var i=n[0],r=n[1],o=n[2];return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Nt(t,e,n,i){var r,o,a,s,u,h,c,l,f,d,p,v,m,g,_,y,x,w,E,T,M,b,R,P,A=i[0],I=i[1],O=i[2],S=Math.hypot(A,I,O);return S<z?null:(A*=S=1/S,I*=S,O*=S,r=Math.sin(n),a=1-(o=Math.cos(n)),s=e[0],u=e[1],h=e[2],c=e[3],l=e[4],f=e[5],d=e[6],p=e[7],v=e[8],m=e[9],g=e[10],_=e[11],y=A*A*a+o,x=I*A*a+O*r,w=O*A*a-I*r,E=A*I*a-O*r,T=I*I*a+o,M=O*I*a+A*r,b=A*O*a+I*r,R=I*O*a-A*r,P=O*O*a+o,t[0]=s*y+l*x+v*w,t[1]=u*y+f*x+m*w,t[2]=h*y+d*x+g*w,t[3]=c*y+p*x+_*w,t[4]=s*E+l*T+v*M,t[5]=u*E+f*T+m*M,t[6]=h*E+d*T+g*M,t[7]=c*E+p*T+_*M,t[8]=s*b+l*R+v*P,t[9]=u*b+f*R+m*P,t[10]=h*b+d*R+g*P,t[11]=c*b+p*R+_*P,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function Ut(t,e,n){var i=Math.sin(n),r=Math.cos(n),o=e[4],a=e[5],s=e[6],u=e[7],h=e[8],c=e[9],l=e[10],f=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=o*r+h*i,t[5]=a*r+c*i,t[6]=s*r+l*i,t[7]=u*r+f*i,t[8]=h*r-o*i,t[9]=c*r-a*i,t[10]=l*r-s*i,t[11]=f*r-u*i,t}function zt(t,e,n){var i=Math.sin(n),r=Math.cos(n),o=e[0],a=e[1],s=e[2],u=e[3],h=e[8],c=e[9],l=e[10],f=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*r-h*i,t[1]=a*r-c*i,t[2]=s*r-l*i,t[3]=u*r-f*i,t[8]=o*i+h*r,t[9]=a*i+c*r,t[10]=s*i+l*r,t[11]=u*i+f*r,t}function Qt(t,e,n){var i=Math.sin(n),r=Math.cos(n),o=e[0],a=e[1],s=e[2],u=e[3],h=e[4],c=e[5],l=e[6],f=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*r+h*i,t[1]=a*r+c*i,t[2]=s*r+l*i,t[3]=u*r+f*i,t[4]=h*r-o*i,t[5]=c*r-a*i,t[6]=l*r-s*i,t[7]=f*r-u*i,t}function Wt(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function kt(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Yt(t,e,n){var i,r,o,a=n[0],s=n[1],u=n[2],h=Math.hypot(a,s,u);return h<z?null:(a*=h=1/h,s*=h,u*=h,i=Math.sin(e),o=1-(r=Math.cos(e)),t[0]=a*a*o+r,t[1]=s*a*o+u*i,t[2]=u*a*o-s*i,t[3]=0,t[4]=a*s*o-u*i,t[5]=s*s*o+r,t[6]=u*s*o+a*i,t[7]=0,t[8]=a*u*o+s*i,t[9]=s*u*o-a*i,t[10]=u*u*o+r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function Xt(t,e){var n=Math.sin(e),i=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function qt(t,e){var n=Math.sin(e),i=Math.cos(e);return t[0]=i,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Bt(t,e){var n=Math.sin(e),i=Math.cos(e);return t[0]=i,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Gt(t,e,n){var i=e[0],r=e[1],o=e[2],a=e[3],s=i+i,u=r+r,h=o+o,c=i*s,l=i*u,f=i*h,d=r*u,p=r*h,v=o*h,m=a*s,g=a*u,_=a*h;return t[0]=1-(d+v),t[1]=l+_,t[2]=f-g,t[3]=0,t[4]=l-_,t[5]=1-(c+v),t[6]=p+m,t[7]=0,t[8]=f+g,t[9]=p-m,t[10]=1-(c+d),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function Ht(t,e){var n=new Q(3),i=-e[0],r=-e[1],o=-e[2],a=e[3],s=e[4],u=e[5],h=e[6],c=e[7],l=i*i+r*r+o*o+a*a;return l>0?(n[0]=2*(s*a+c*i+u*o-h*r)/l,n[1]=2*(u*a+c*r+h*i-s*o)/l,n[2]=2*(h*a+c*o+s*r-u*i)/l):(n[0]=2*(s*a+c*i+u*o-h*r),n[1]=2*(u*a+c*r+h*i-s*o),n[2]=2*(h*a+c*o+s*r-u*i)),Gt(t,e,n),t}function jt(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function Kt(t,e){var n=e[0],i=e[1],r=e[2],o=e[4],a=e[5],s=e[6],u=e[8],h=e[9],c=e[10];return t[0]=Math.hypot(n,i,r),t[1]=Math.hypot(o,a,s),t[2]=Math.hypot(u,h,c),t}function Zt(t,e){var n=new Q(3);Kt(n,e);var i=1/n[0],r=1/n[1],o=1/n[2],a=e[0]*i,s=e[1]*r,u=e[2]*o,h=e[4]*i,c=e[5]*r,l=e[6]*o,f=e[8]*i,d=e[9]*r,p=e[10]*o,v=a+c+p,m=0;return v>0?(m=2*Math.sqrt(v+1),t[3]=.25*m,t[0]=(l-d)/m,t[1]=(f-u)/m,t[2]=(s-h)/m):a>c&&a>p?(m=2*Math.sqrt(1+a-c-p),t[3]=(l-d)/m,t[0]=.25*m,t[1]=(s+h)/m,t[2]=(f+u)/m):c>p?(m=2*Math.sqrt(1+c-a-p),t[3]=(f-u)/m,t[0]=(s+h)/m,t[1]=.25*m,t[2]=(l+d)/m):(m=2*Math.sqrt(1+p-a-c),t[3]=(s-h)/m,t[0]=(f+u)/m,t[1]=(l+d)/m,t[2]=.25*m),t}function Jt(t,e,n,i){var r=e[0],o=e[1],a=e[2],s=e[3],u=r+r,h=o+o,c=a+a,l=r*u,f=r*h,d=r*c,p=o*h,v=o*c,m=a*c,g=s*u,_=s*h,y=s*c,x=i[0],w=i[1],E=i[2];return t[0]=(1-(p+m))*x,t[1]=(f+y)*x,t[2]=(d-_)*x,t[3]=0,t[4]=(f-y)*w,t[5]=(1-(l+m))*w,t[6]=(v+g)*w,t[7]=0,t[8]=(d+_)*E,t[9]=(v-g)*E,t[10]=(1-(l+p))*E,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function $t(t,e,n,i,r){var o=e[0],a=e[1],s=e[2],u=e[3],h=o+o,c=a+a,l=s+s,f=o*h,d=o*c,p=o*l,v=a*c,m=a*l,g=s*l,_=u*h,y=u*c,x=u*l,w=i[0],E=i[1],T=i[2],M=r[0],b=r[1],R=r[2],P=(1-(v+g))*w,A=(d+x)*w,I=(p-y)*w,O=(d-x)*E,S=(1-(f+g))*E,C=(m+_)*E,D=(p+y)*T,L=(m-_)*T,F=(1-(f+v))*T;return t[0]=P,t[1]=A,t[2]=I,t[3]=0,t[4]=O,t[5]=S,t[6]=C,t[7]=0,t[8]=D,t[9]=L,t[10]=F,t[11]=0,t[12]=n[0]+M-(P*M+O*b+D*R),t[13]=n[1]+b-(A*M+S*b+L*R),t[14]=n[2]+R-(I*M+C*b+F*R),t[15]=1,t}function te(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=n+n,s=i+i,u=r+r,h=n*a,c=i*a,l=i*s,f=r*a,d=r*s,p=r*u,v=o*a,m=o*s,g=o*u;return t[0]=1-l-p,t[1]=c+g,t[2]=f-m,t[3]=0,t[4]=c-g,t[5]=1-h-p,t[6]=d+v,t[7]=0,t[8]=f+m,t[9]=d-v,t[10]=1-h-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ee(t,e,n,i,r,o,a){var s=1/(n-e),u=1/(r-i),h=1/(o-a);return t[0]=2*o*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*o*u,t[6]=0,t[7]=0,t[8]=(n+e)*s,t[9]=(r+i)*u,t[10]=(a+o)*h,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*o*2*h,t[15]=0,t}function ne(t,e,n,i,r){var o,a=1/Math.tan(e/2);return t[0]=a/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=r&&r!==1/0?(o=1/(i-r),t[10]=(r+i)*o,t[14]=2*r*i*o):(t[10]=-1,t[14]=-2*i),t}function ie(t,e,n,i){var r=Math.tan(e.upDegrees*Math.PI/180),o=Math.tan(e.downDegrees*Math.PI/180),a=Math.tan(e.leftDegrees*Math.PI/180),s=Math.tan(e.rightDegrees*Math.PI/180),u=2/(a+s),h=2/(r+o);return t[0]=u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=h,t[6]=0,t[7]=0,t[8]=-(a-s)*u*.5,t[9]=(r-o)*h*.5,t[10]=i/(n-i),t[11]=-1,t[12]=0,t[13]=0,t[14]=i*n/(n-i),t[15]=0,t}function re(t,e,n,i,r,o,a){var s=1/(e-n),u=1/(i-r),h=1/(o-a);return t[0]=-2*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*h,t[11]=0,t[12]=(e+n)*s,t[13]=(r+i)*u,t[14]=(a+o)*h,t[15]=1,t}function oe(t,e,n,i){var r,o,a,s,u,h,c,l,f,d,p=e[0],v=e[1],m=e[2],g=i[0],_=i[1],y=i[2],x=n[0],w=n[1],E=n[2];return Math.abs(p-x)<z&&Math.abs(v-w)<z&&Math.abs(m-E)<z?It(t):(c=p-x,l=v-w,f=m-E,r=_*(f*=d=1/Math.hypot(c,l,f))-y*(l*=d),o=y*(c*=d)-g*f,a=g*l-_*c,(d=Math.hypot(r,o,a))?(r*=d=1/d,o*=d,a*=d):(r=0,o=0,a=0),s=l*a-f*o,u=f*r-c*a,h=c*o-l*r,(d=Math.hypot(s,u,h))?(s*=d=1/d,u*=d,h*=d):(s=0,u=0,h=0),t[0]=r,t[1]=s,t[2]=c,t[3]=0,t[4]=o,t[5]=u,t[6]=l,t[7]=0,t[8]=a,t[9]=h,t[10]=f,t[11]=0,t[12]=-(r*p+o*v+a*m),t[13]=-(s*p+u*v+h*m),t[14]=-(c*p+l*v+f*m),t[15]=1,t)}function ae(t,e,n,i){var r=e[0],o=e[1],a=e[2],s=i[0],u=i[1],h=i[2],c=r-n[0],l=o-n[1],f=a-n[2],d=c*c+l*l+f*f;d>0&&(c*=d=1/Math.sqrt(d),l*=d,f*=d);var p=u*f-h*l,v=h*c-s*f,m=s*l-u*c;return(d=p*p+v*v+m*m)>0&&(p*=d=1/Math.sqrt(d),v*=d,m*=d),t[0]=p,t[1]=v,t[2]=m,t[3]=0,t[4]=l*m-f*v,t[5]=f*p-c*m,t[6]=c*v-l*p,t[7]=0,t[8]=c,t[9]=l,t[10]=f,t[11]=0,t[12]=r,t[13]=o,t[14]=a,t[15]=1,t}function se(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function ue(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function he(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function ce(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function le(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function fe(t,e,n,i){return t[0]=e[0]+n[0]*i,t[1]=e[1]+n[1]*i,t[2]=e[2]+n[2]*i,t[3]=e[3]+n[3]*i,t[4]=e[4]+n[4]*i,t[5]=e[5]+n[5]*i,t[6]=e[6]+n[6]*i,t[7]=e[7]+n[7]*i,t[8]=e[8]+n[8]*i,t[9]=e[9]+n[9]*i,t[10]=e[10]+n[10]*i,t[11]=e[11]+n[11]*i,t[12]=e[12]+n[12]*i,t[13]=e[13]+n[13]*i,t[14]=e[14]+n[14]*i,t[15]=e[15]+n[15]*i,t}function de(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function pe(t,e){var n=t[0],i=t[1],r=t[2],o=t[3],a=t[4],s=t[5],u=t[6],h=t[7],c=t[8],l=t[9],f=t[10],d=t[11],p=t[12],v=t[13],m=t[14],g=t[15],_=e[0],y=e[1],x=e[2],w=e[3],E=e[4],T=e[5],M=e[6],b=e[7],R=e[8],P=e[9],A=e[10],I=e[11],O=e[12],S=e[13],C=e[14],D=e[15];return Math.abs(n-_)<=z*Math.max(1,Math.abs(n),Math.abs(_))&&Math.abs(i-y)<=z*Math.max(1,Math.abs(i),Math.abs(y))&&Math.abs(r-x)<=z*Math.max(1,Math.abs(r),Math.abs(x))&&Math.abs(o-w)<=z*Math.max(1,Math.abs(o),Math.abs(w))&&Math.abs(a-E)<=z*Math.max(1,Math.abs(a),Math.abs(E))&&Math.abs(s-T)<=z*Math.max(1,Math.abs(s),Math.abs(T))&&Math.abs(u-M)<=z*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(h-b)<=z*Math.max(1,Math.abs(h),Math.abs(b))&&Math.abs(c-R)<=z*Math.max(1,Math.abs(c),Math.abs(R))&&Math.abs(l-P)<=z*Math.max(1,Math.abs(l),Math.abs(P))&&Math.abs(f-A)<=z*Math.max(1,Math.abs(f),Math.abs(A))&&Math.abs(d-I)<=z*Math.max(1,Math.abs(d),Math.abs(I))&&Math.abs(p-O)<=z*Math.max(1,Math.abs(p),Math.abs(O))&&Math.abs(v-S)<=z*Math.max(1,Math.abs(v),Math.abs(S))&&Math.abs(m-C)<=z*Math.max(1,Math.abs(m),Math.abs(C))&&Math.abs(g-D)<=z*Math.max(1,Math.abs(g),Math.abs(D))}var ve=Lt,me=ce;function ge(){var t=new Q(3);return Q!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function _e(t){var e=new Q(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function ye(t){var e=t[0],n=t[1],i=t[2];return Math.hypot(e,n,i)}function xe(t,e,n){var i=new Q(3);return i[0]=t,i[1]=e,i[2]=n,i}function we(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Ee(t,e,n,i){return t[0]=e,t[1]=n,t[2]=i,t}function Te(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function Me(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function be(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function Re(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function Pe(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function Ae(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function Ie(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t}function Oe(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t}function Se(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function Ce(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function De(t,e,n,i){return t[0]=e[0]+n[0]*i,t[1]=e[1]+n[1]*i,t[2]=e[2]+n[2]*i,t}function Le(t,e){var n=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return Math.hypot(n,i,r)}function Fe(t,e){var n=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return n*n+i*i+r*r}function Ve(t){var e=t[0],n=t[1],i=t[2];return e*e+n*n+i*i}function Ne(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function Ue(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function ze(t,e){var n=e[0],i=e[1],r=e[2],o=n*n+i*i+r*r;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t}function Qe(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function We(t,e,n){var i=e[0],r=e[1],o=e[2],a=n[0],s=n[1],u=n[2];return t[0]=r*u-o*s,t[1]=o*a-i*u,t[2]=i*s-r*a,t}function ke(t,e,n,i){var r=e[0],o=e[1],a=e[2];return t[0]=r+i*(n[0]-r),t[1]=o+i*(n[1]-o),t[2]=a+i*(n[2]-a),t}function Ye(t,e,n,i,r,o){var a=o*o,s=a*(2*o-3)+1,u=a*(o-2)+o,h=a*(o-1),c=a*(3-2*o);return t[0]=e[0]*s+n[0]*u+i[0]*h+r[0]*c,t[1]=e[1]*s+n[1]*u+i[1]*h+r[1]*c,t[2]=e[2]*s+n[2]*u+i[2]*h+r[2]*c,t}function Xe(t,e,n,i,r,o){var a=1-o,s=a*a,u=o*o,h=s*a,c=3*o*s,l=3*u*a,f=u*o;return t[0]=e[0]*h+n[0]*c+i[0]*l+r[0]*f,t[1]=e[1]*h+n[1]*c+i[1]*l+r[1]*f,t[2]=e[2]*h+n[2]*c+i[2]*l+r[2]*f,t}function qe(t,e){e=e||1;var n=2*W()*Math.PI,i=2*W()-1,r=Math.sqrt(1-i*i)*e;return t[0]=Math.cos(n)*r,t[1]=Math.sin(n)*r,t[2]=i*e,t}function Be(t,e,n){var i=e[0],r=e[1],o=e[2],a=n[3]*i+n[7]*r+n[11]*o+n[15];return a=a||1,t[0]=(n[0]*i+n[4]*r+n[8]*o+n[12])/a,t[1]=(n[1]*i+n[5]*r+n[9]*o+n[13])/a,t[2]=(n[2]*i+n[6]*r+n[10]*o+n[14])/a,t}function Ge(t,e,n){var i=e[0],r=e[1],o=e[2];return t[0]=i*n[0]+r*n[3]+o*n[6],t[1]=i*n[1]+r*n[4]+o*n[7],t[2]=i*n[2]+r*n[5]+o*n[8],t}function He(t,e,n){var i=n[0],r=n[1],o=n[2],a=n[3],s=e[0],u=e[1],h=e[2],c=r*h-o*u,l=o*s-i*h,f=i*u-r*s,d=r*f-o*l,p=o*c-i*f,v=i*l-r*c,m=2*a;return c*=m,l*=m,f*=m,d*=2,p*=2,v*=2,t[0]=s+c+d,t[1]=u+l+p,t[2]=h+f+v,t}function je(t,e,n,i){var r=[],o=[];return r[0]=e[0]-n[0],r[1]=e[1]-n[1],r[2]=e[2]-n[2],o[0]=r[0],o[1]=r[1]*Math.cos(i)-r[2]*Math.sin(i),o[2]=r[1]*Math.sin(i)+r[2]*Math.cos(i),t[0]=o[0]+n[0],t[1]=o[1]+n[1],t[2]=o[2]+n[2],t}function Ke(t,e,n,i){var r=[],o=[];return r[0]=e[0]-n[0],r[1]=e[1]-n[1],r[2]=e[2]-n[2],o[0]=r[2]*Math.sin(i)+r[0]*Math.cos(i),o[1]=r[1],o[2]=r[2]*Math.cos(i)-r[0]*Math.sin(i),t[0]=o[0]+n[0],t[1]=o[1]+n[1],t[2]=o[2]+n[2],t}function Ze(t,e,n,i){var r=[],o=[];return r[0]=e[0]-n[0],r[1]=e[1]-n[1],r[2]=e[2]-n[2],o[0]=r[0]*Math.cos(i)-r[1]*Math.sin(i),o[1]=r[0]*Math.sin(i)+r[1]*Math.cos(i),o[2]=r[2],t[0]=o[0]+n[0],t[1]=o[1]+n[1],t[2]=o[2]+n[2],t}function Je(t,e){var n=t[0],i=t[1],r=t[2],o=e[0],a=e[1],s=e[2],u=Math.sqrt(n*n+i*i+r*r)*Math.sqrt(o*o+a*a+s*s),h=u&&Qe(t,e)/u;return Math.acos(Math.min(Math.max(h,-1),1))}function $e(t){return t[0]=0,t[1]=0,t[2]=0,t}function tn(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function en(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function nn(t,e){var n=t[0],i=t[1],r=t[2],o=e[0],a=e[1],s=e[2];return Math.abs(n-o)<=z*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(i-a)<=z*Math.max(1,Math.abs(i),Math.abs(a))&&Math.abs(r-s)<=z*Math.max(1,Math.abs(r),Math.abs(s))}var rn,on=Me,an=be,sn=Re,un=Le,hn=Fe,cn=ye,ln=Ve,fn=(rn=ge(),function(t,e,n,i,r,o){var a,s;for(e||(e=3),n||(n=0),s=i?Math.min(i*e+n,t.length):t.length,a=n;a<s;a+=e)rn[0]=t[a],rn[1]=t[a+1],rn[2]=t[a+2],r(rn,rn,o),t[a]=rn[0],t[a+1]=rn[1],t[a+2]=rn[2];return t});function dn(t){var e=t[0],n=t[1],i=t[2],r=t[3];return Math.hypot(e,n,i,r)}function pn(t){var e=t[0],n=t[1],i=t[2],r=t[3];return e*e+n*n+i*i+r*r}!function(){var t,e=(t=new Q(4),Q!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t)}();function vn(){var t=new Q(4);return Q!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function mn(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function gn(t,e,n){n*=.5;var i=Math.sin(n);return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=Math.cos(n),t}function _n(t,e){var n=2*Math.acos(e[3]),i=Math.sin(n/2);return i>z?(t[0]=e[0]/i,t[1]=e[1]/i,t[2]=e[2]/i):(t[0]=1,t[1]=0,t[2]=0),n}function yn(t,e){var n=Hn(t,e);return Math.acos(2*n*n-1)}function xn(t,e,n){var i=e[0],r=e[1],o=e[2],a=e[3],s=n[0],u=n[1],h=n[2],c=n[3];return t[0]=i*c+a*s+r*h-o*u,t[1]=r*c+a*u+o*s-i*h,t[2]=o*c+a*h+i*u-r*s,t[3]=a*c-i*s-r*u-o*h,t}function wn(t,e,n){n*=.5;var i=e[0],r=e[1],o=e[2],a=e[3],s=Math.sin(n),u=Math.cos(n);return t[0]=i*u+a*s,t[1]=r*u+o*s,t[2]=o*u-r*s,t[3]=a*u-i*s,t}function En(t,e,n){n*=.5;var i=e[0],r=e[1],o=e[2],a=e[3],s=Math.sin(n),u=Math.cos(n);return t[0]=i*u-o*s,t[1]=r*u+a*s,t[2]=o*u+i*s,t[3]=a*u-r*s,t}function Tn(t,e,n){n*=.5;var i=e[0],r=e[1],o=e[2],a=e[3],s=Math.sin(n),u=Math.cos(n);return t[0]=i*u+r*s,t[1]=r*u-i*s,t[2]=o*u+a*s,t[3]=a*u-o*s,t}function Mn(t,e){var n=e[0],i=e[1],r=e[2];return t[0]=n,t[1]=i,t[2]=r,t[3]=Math.sqrt(Math.abs(1-n*n-i*i-r*r)),t}function bn(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=Math.sqrt(n*n+i*i+r*r),s=Math.exp(o),u=a>0?s*Math.sin(a)/a:0;return t[0]=n*u,t[1]=i*u,t[2]=r*u,t[3]=s*Math.cos(a),t}function Rn(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=Math.sqrt(n*n+i*i+r*r),s=a>0?Math.atan2(a,o)/a:0;return t[0]=n*s,t[1]=i*s,t[2]=r*s,t[3]=.5*Math.log(n*n+i*i+r*r+o*o),t}function Pn(t,e,n){return Rn(t,e),Gn(t,t,n),bn(t,t),t}function An(t,e,n,i){var r,o,a,s,u,h=e[0],c=e[1],l=e[2],f=e[3],d=n[0],p=n[1],v=n[2],m=n[3];return(o=h*d+c*p+l*v+f*m)<0&&(o=-o,d=-d,p=-p,v=-v,m=-m),1-o>z?(r=Math.acos(o),a=Math.sin(r),s=Math.sin((1-i)*r)/a,u=Math.sin(i*r)/a):(s=1-i,u=i),t[0]=s*h+u*d,t[1]=s*c+u*p,t[2]=s*l+u*v,t[3]=s*f+u*m,t}function In(t){var e=W(),n=W(),i=W(),r=Math.sqrt(1-e),o=Math.sqrt(e);return t[0]=r*Math.sin(2*Math.PI*n),t[1]=r*Math.cos(2*Math.PI*n),t[2]=o*Math.sin(2*Math.PI*i),t[3]=o*Math.cos(2*Math.PI*i),t}function On(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=n*n+i*i+r*r+o*o,s=a?1/a:0;return t[0]=-n*s,t[1]=-i*s,t[2]=-r*s,t[3]=o*s,t}function Sn(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function Cn(t,e){var n,i=e[0]+e[4]+e[8];if(i>0)n=Math.sqrt(i+1),t[3]=.5*n,n=.5/n,t[0]=(e[5]-e[7])*n,t[1]=(e[6]-e[2])*n,t[2]=(e[1]-e[3])*n;else{var r=0;e[4]>e[0]&&(r=1),e[8]>e[3*r+r]&&(r=2);var o=(r+1)%3,a=(r+2)%3;n=Math.sqrt(e[3*r+r]-e[3*o+o]-e[3*a+a]+1),t[r]=.5*n,n=.5/n,t[3]=(e[3*o+a]-e[3*a+o])*n,t[o]=(e[3*o+r]+e[3*r+o])*n,t[a]=(e[3*a+r]+e[3*r+a])*n}return t}function Dn(t,e,n,i){var r=.5*Math.PI/180;e*=r,n*=r,i*=r;var o=Math.sin(e),a=Math.cos(e),s=Math.sin(n),u=Math.cos(n),h=Math.sin(i),c=Math.cos(i);return t[0]=o*u*c-a*s*h,t[1]=a*s*c+o*u*h,t[2]=a*u*h-o*s*c,t[3]=a*u*c+o*s*h,t}function Ln(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var Fn,Vn,Nn,Un,zn,Qn,Wn=function(t){var e=new Q(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},kn=function(t,e,n,i){var r=new Q(4);return r[0]=t,r[1]=e,r[2]=n,r[3]=i,r},Yn=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},Xn=function(t,e,n,i,r){return t[0]=e,t[1]=n,t[2]=i,t[3]=r,t},qn=function(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t},Bn=xn,Gn=function(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t},Hn=function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},jn=function(t,e,n,i){var r=e[0],o=e[1],a=e[2],s=e[3];return t[0]=r+i*(n[0]-r),t[1]=o+i*(n[1]-o),t[2]=a+i*(n[2]-a),t[3]=s+i*(n[3]-s),t},Kn=dn,Zn=Kn,Jn=pn,$n=Jn,ti=function(t,e){var n=e[0],i=e[1],r=e[2],o=e[3],a=n*n+i*i+r*r+o*o;return a>0&&(a=1/Math.sqrt(a)),t[0]=n*a,t[1]=i*a,t[2]=r*a,t[3]=o*a,t},ei=function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},ni=function(t,e){var n=t[0],i=t[1],r=t[2],o=t[3],a=e[0],s=e[1],u=e[2],h=e[3];return Math.abs(n-a)<=z*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(i-s)<=z*Math.max(1,Math.abs(i),Math.abs(s))&&Math.abs(r-u)<=z*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(o-h)<=z*Math.max(1,Math.abs(o),Math.abs(h))},ii=(Fn=ge(),Vn=xe(1,0,0),Nn=xe(0,1,0),function(t,e,n){var i=Qe(e,n);return i<-.999999?(We(Fn,Vn,e),cn(Fn)<1e-6&&We(Fn,Nn,e),ze(Fn,Fn),gn(t,Fn,Math.PI),t):i>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(We(Fn,e,n),t[0]=Fn[0],t[1]=Fn[1],t[2]=Fn[2],t[3]=1+i,ti(t,t))}),ri=(Un=vn(),zn=vn(),function(t,e,n,i,r,o){return An(Un,e,r,o),An(zn,n,i,o),An(t,Un,zn,2*o*(1-o)),t}),oi=(Qn=B(),function(t,e,n,i){return Qn[0]=n[0],Qn[3]=n[1],Qn[6]=n[2],Qn[1]=i[0],Qn[4]=i[1],Qn[7]=i[2],Qn[2]=-e[0],Qn[5]=-e[1],Qn[8]=-e[2],ti(t,Cn(t,Qn))});function ai(){var t=new Q(2);return Q!=Float32Array&&(t[0]=0,t[1]=0),t}function si(t){var e=new Q(2);return e[0]=t[0],e[1]=t[1],e}function ui(t,e){var n=new Q(2);return n[0]=t,n[1]=e,n}function hi(t,e){return t[0]=e[0],t[1]=e[1],t}function ci(t,e,n){return t[0]=e,t[1]=n,t}function li(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t}function fi(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t}function di(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t}function pi(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t}function vi(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t}function mi(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t}function gi(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t}function _i(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t}function yi(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t}function xi(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t}function wi(t,e,n,i){return t[0]=e[0]+n[0]*i,t[1]=e[1]+n[1]*i,t}function Ei(t,e){var n=e[0]-t[0],i=e[1]-t[1];return Math.hypot(n,i)}function Ti(t,e){var n=e[0]-t[0],i=e[1]-t[1];return n*n+i*i}function Mi(t){var e=t[0],n=t[1];return Math.hypot(e,n)}function bi(t){var e=t[0],n=t[1];return e*e+n*n}function Ri(t,e){return t[0]=-e[0],t[1]=-e[1],t}function Pi(t,e){return t[0]=1/e[0],t[1]=1/e[1],t}function Ai(t,e){var n=e[0],i=e[1],r=n*n+i*i;return r>0&&(r=1/Math.sqrt(r)),t[0]=e[0]*r,t[1]=e[1]*r,t}function Ii(t,e){return t[0]*e[0]+t[1]*e[1]}function Oi(t,e,n){var i=e[0]*n[1]-e[1]*n[0];return t[0]=t[1]=0,t[2]=i,t}function Si(t,e,n,i){var r=e[0],o=e[1];return t[0]=r+i*(n[0]-r),t[1]=o+i*(n[1]-o),t}function Ci(t,e){e=e||1;var n=2*W()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t}function Di(t,e,n){var i=e[0],r=e[1];return t[0]=n[0]*i+n[2]*r,t[1]=n[1]*i+n[3]*r,t}function Li(t,e,n){var i=e[0],r=e[1];return t[0]=n[0]*i+n[2]*r+n[4],t[1]=n[1]*i+n[3]*r+n[5],t}function Fi(t,e,n){var i=e[0],r=e[1];return t[0]=n[0]*i+n[3]*r+n[6],t[1]=n[1]*i+n[4]*r+n[7],t}function Vi(t,e,n){var i=e[0],r=e[1];return t[0]=n[0]*i+n[4]*r+n[12],t[1]=n[1]*i+n[5]*r+n[13],t}function Ni(t,e,n,i){var r=e[0]-n[0],o=e[1]-n[1],a=Math.sin(i),s=Math.cos(i);return t[0]=r*s-o*a+n[0],t[1]=r*a+o*s+n[1],t}function Ui(t,e){var n=t[0],i=t[1],r=e[0],o=e[1],a=Math.sqrt(n*n+i*i)*Math.sqrt(r*r+o*o),s=a&&(n*r+i*o)/a;return Math.acos(Math.min(Math.max(s,-1),1))}function zi(t){return t[0]=0,t[1]=0,t}function Qi(t){return"vec2("+t[0]+", "+t[1]+")"}function Wi(t,e){return t[0]===e[0]&&t[1]===e[1]}function ki(t,e){var n=t[0],i=t[1],r=e[0],o=e[1];return Math.abs(n-r)<=z*Math.max(1,Math.abs(n),Math.abs(r))&&Math.abs(i-o)<=z*Math.max(1,Math.abs(i),Math.abs(o))}var Yi=Mi,Xi=fi,qi=di,Bi=pi,Gi=Ei,Hi=Ti,ji=bi,Ki=function(){var t=ai();return function(e,n,i,r,o,a){var s,u;for(n||(n=2),i||(i=0),u=r?Math.min(r*n+i,e.length):e.length,s=i;s<u;s+=n)t[0]=e[s],t[1]=e[s+1],o(t,t,a),e[s]=t[0],e[s+1]=t[1];return e}}();
/*! Hammer.JS - v2.0.17-rc - 2019-12-16
 * http://naver.github.io/egjs
 *
 * Forked By Naver egjs
 * Copyright (c) hammerjs
 * Licensed under the MIT license */
function Zi(){return(Zi=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}function Ji(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function $i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var tr,er="function"!=typeof Object.assign?function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var r in i)i.hasOwnProperty(r)&&(e[r]=i[r])}return e}:Object.assign,nr=["","webkit","Moz","MS","ms","o"],ir="undefined"==typeof document?{style:{}}:document.createElement("div"),rr=Math.round,or=Math.abs,ar=Date.now;function sr(t,e){for(var n,i,r=e[0].toUpperCase()+e.slice(1),o=0;o<nr.length;){if((i=(n=nr[o])?n+r:e)in t)return i;o++}}tr="undefined"==typeof window?{}:window;var ur=sr(ir.style,"touchAction"),hr=void 0!==ur;var cr=function(){if(!hr)return!1;var t={},e=tr.CSS&&tr.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){return t[n]=!e||tr.CSS.supports("touch-action",n)})),t}(),lr="ontouchstart"in tr,fr=void 0!==sr(tr,"PointerEvent"),dr=lr&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),pr=["x","y"],vr=["clientX","clientY"];function mr(t,e,n){var i;if(t)if(t.forEach)t.forEach(e,n);else if(void 0!==t.length)for(i=0;i<t.length;)e.call(n,t[i],i,t),i++;else for(i in t)t.hasOwnProperty(i)&&e.call(n,t[i],i,t)}function gr(t,e){return"function"==typeof t?t.apply(e&&e[0]||void 0,e):t}function _r(t,e){return t.indexOf(e)>-1}var yr=function(){function t(t,e){this.manager=t,this.set(e)}var e=t.prototype;return e.set=function(t){"compute"===t&&(t=this.compute()),hr&&this.manager.element.style&&cr[t]&&(this.manager.element.style[ur]=t),this.actions=t.toLowerCase().trim()},e.update=function(){this.set(this.manager.options.touchAction)},e.compute=function(){var t=[];return mr(this.manager.recognizers,(function(e){gr(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(_r(t,"none"))return"none";var e=_r(t,"pan-x"),n=_r(t,"pan-y");return e&&n?"none":e||n?e?"pan-x":"pan-y":_r(t,"manipulation")?"manipulation":"auto"}(t.join(" "))},e.preventDefaults=function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var i=this.actions,r=_r(i,"none")&&!cr.none,o=_r(i,"pan-y")&&!cr["pan-y"],a=_r(i,"pan-x")&&!cr["pan-x"];if(r){var s=1===t.pointers.length,u=t.distance<2,h=t.deltaTime<250;if(s&&u&&h)return}if(!a||!o)return r||o&&6&n||a&&24&n?this.preventSrc(e):void 0}},e.preventSrc=function(t){this.manager.session.prevented=!0,t.preventDefault()},t}();function xr(t,e){for(;t;){if(t===e)return!0;t=t.parentNode}return!1}function wr(t){var e=t.length;if(1===e)return{x:rr(t[0].clientX),y:rr(t[0].clientY)};for(var n=0,i=0,r=0;r<e;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:rr(n/e),y:rr(i/e)}}function Er(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:rr(t.pointers[n].clientX),clientY:rr(t.pointers[n].clientY)},n++;return{timeStamp:ar(),pointers:e,center:wr(e),deltaX:t.deltaX,deltaY:t.deltaY}}function Tr(t,e,n){n||(n=pr);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function Mr(t,e,n){n||(n=pr);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}function br(t,e){return t===e?1:or(t)>=or(e)?t<0?2:4:e<0?8:16}function Rr(t,e,n){return{x:e/t||0,y:n/t||0}}function Pr(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=Er(e)),r>1&&!n.firstMultiple?n.firstMultiple=Er(e):1===r&&(n.firstMultiple=!1);var o=n.firstInput,a=n.firstMultiple,s=a?a.center:o.center,u=e.center=wr(i);e.timeStamp=ar(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=Mr(s,u),e.distance=Tr(s,u),function(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},o=t.prevInput||{};1!==e.eventType&&4!==o.eventType||(r=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}(n,e),e.offsetDirection=br(e.deltaX,e.deltaY);var h,c,l=Rr(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=l.x,e.overallVelocityY=l.y,e.overallVelocity=or(l.x)>or(l.y)?l.x:l.y,e.scale=a?(h=a.pointers,Tr((c=i)[0],c[1],vr)/Tr(h[0],h[1],vr)):1,e.rotation=a?function(t,e){return Mr(e[1],e[0],vr)+Mr(t[1],t[0],vr)}(a.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,function(t,e){var n,i,r,o,a=t.lastInterval||e,s=e.timeStamp-a.timeStamp;if(8!==e.eventType&&(s>25||void 0===a.velocity)){var u=e.deltaX-a.deltaX,h=e.deltaY-a.deltaY,c=Rr(s,u,h);i=c.x,r=c.y,n=or(c.x)>or(c.y)?c.x:c.y,o=br(u,h),t.lastInterval=e}else n=a.velocity,i=a.velocityX,r=a.velocityY,o=a.direction;e.velocity=n,e.velocityX=i,e.velocityY=r,e.direction=o}(n,e);var f,d=t.element,p=e.srcEvent;xr(f=p.composedPath?p.composedPath()[0]:p.path?p.path[0]:p.target,d)&&(d=f),e.target=d}function Ar(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,o=1&e&&i-r==0,a=12&e&&i-r==0;n.isFirst=!!o,n.isFinal=!!a,o&&(t.session={}),n.eventType=e,Pr(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function Ir(t){return t.trim().split(/\s+/g)}function Or(t,e,n){mr(Ir(e),(function(e){t.addEventListener(e,n,!1)}))}function Sr(t,e,n){mr(Ir(e),(function(e){t.removeEventListener(e,n,!1)}))}function Cr(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||window}var Dr=function(){function t(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){gr(t.options.enable,[t])&&n.handler(e)},this.init()}var e=t.prototype;return e.handler=function(){},e.init=function(){this.evEl&&Or(this.element,this.evEl,this.domHandler),this.evTarget&&Or(this.target,this.evTarget,this.domHandler),this.evWin&&Or(Cr(this.element),this.evWin,this.domHandler)},e.destroy=function(){this.evEl&&Sr(this.element,this.evEl,this.domHandler),this.evTarget&&Sr(this.target,this.evTarget,this.domHandler),this.evWin&&Sr(Cr(this.element),this.evWin,this.domHandler)},t}();function Lr(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}var Fr={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8},Vr={2:"touch",3:"pen",4:"mouse",5:"kinect"},Nr="pointerdown",Ur="pointermove pointerup pointercancel";tr.MSPointerEvent&&!tr.PointerEvent&&(Nr="MSPointerDown",Ur="MSPointerMove MSPointerUp MSPointerCancel");var zr=function(t){function e(){var n,i=e.prototype;return i.evEl=Nr,i.evWin=Ur,(n=t.apply(this,arguments)||this).store=n.manager.session.pointerEvents=[],n}return Ji(e,t),e.prototype.handler=function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=Fr[i],o=Vr[t.pointerType]||t.pointerType,a="touch"===o,s=Lr(e,t.pointerId,"pointerId");1&r&&(0===t.button||a)?s<0&&(e.push(t),s=e.length-1):12&r&&(n=!0),s<0||(e[s]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(s,1))},e}(Dr);function Qr(t){return Array.prototype.slice.call(t,0)}function Wr(t,e,n){for(var i=[],r=[],o=0;o<t.length;){var a=e?t[o][e]:t[o];Lr(r,a)<0&&i.push(t[o]),r[o]=a,o++}return n&&(i=e?i.sort((function(t,n){return t[e]>n[e]})):i.sort()),i}var kr={touchstart:1,touchmove:2,touchend:4,touchcancel:8},Yr=function(t){function e(){var n;return e.prototype.evTarget="touchstart touchmove touchend touchcancel",(n=t.apply(this,arguments)||this).targetIds={},n}return Ji(e,t),e.prototype.handler=function(t){var e=kr[t.type],n=Xr.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})},e}(Dr);function Xr(t,e){var n,i,r=Qr(t.touches),o=this.targetIds;if(3&e&&1===r.length)return o[r[0].identifier]=!0,[r,r];var a=Qr(t.changedTouches),s=[],u=this.target;if(i=r.filter((function(t){return xr(t.target,u)})),1===e)for(n=0;n<i.length;)o[i[n].identifier]=!0,n++;for(n=0;n<a.length;)o[a[n].identifier]&&s.push(a[n]),12&e&&delete o[a[n].identifier],n++;return s.length?[Wr(i.concat(s),"identifier",!0),s]:void 0}var qr={mousedown:1,mousemove:2,mouseup:4},Br=function(t){function e(){var n,i=e.prototype;return i.evEl="mousedown",i.evWin="mousemove mouseup",(n=t.apply(this,arguments)||this).pressed=!1,n}return Ji(e,t),e.prototype.handler=function(t){var e=qr[t.type];1&e&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=4),this.pressed&&(4&e&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))},e}(Dr);function Gr(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY},i=this.lastTouches;this.lastTouches.push(n);setTimeout((function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)}),2500)}}function Hr(t,e){1&t?(this.primaryTouch=e.changedPointers[0].identifier,Gr.call(this,e)):12&t&&Gr.call(this,e)}function jr(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(e-r.x),a=Math.abs(n-r.y);if(o<=25&&a<=25)return!0}return!1}var Kr=function(){return function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).handler=function(t,e,n){var r="touch"===n.pointerType,o="mouse"===n.pointerType;if(!(o&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(r)Hr.call($i($i(i)),e,n);else if(o&&jr.call($i($i(i)),n))return;i.callback(t,e,n)}},i.touch=new Yr(i.manager,i.handler),i.mouse=new Br(i.manager,i.handler),i.primaryTouch=null,i.lastTouches=[],i}return Ji(e,t),e.prototype.destroy=function(){this.touch.destroy(),this.mouse.destroy()},e}(Dr)}();function Zr(t,e,n){return!!Array.isArray(t)&&(mr(t,n[e],n),!0)}var Jr=1;function $r(t,e){var n=e.manager;return n?n.get(t):t}function to(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}var eo=function(){function t(t){void 0===t&&(t={}),this.options=Zi({enable:!0},t),this.id=Jr++,this.manager=null,this.state=1,this.simultaneous={},this.requireFail=[]}var e=t.prototype;return e.set=function(t){return er(this.options,t),this.manager&&this.manager.touchAction.update(),this},e.recognizeWith=function(t){if(Zr(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=$r(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},e.dropRecognizeWith=function(t){return Zr(t,"dropRecognizeWith",this)||(t=$r(t,this),delete this.simultaneous[t.id]),this},e.requireFailure=function(t){if(Zr(t,"requireFailure",this))return this;var e=this.requireFail;return-1===Lr(e,t=$r(t,this))&&(e.push(t),t.requireFailure(this)),this},e.dropRequireFailure=function(t){if(Zr(t,"dropRequireFailure",this))return this;t=$r(t,this);var e=Lr(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},e.hasRequireFailures=function(){return this.requireFail.length>0},e.canRecognizeWith=function(t){return!!this.simultaneous[t.id]},e.emit=function(t){var e=this,n=this.state;function i(n){e.manager.emit(n,t)}n<8&&i(e.options.event+to(n)),i(e.options.event),t.additionalEvent&&i(t.additionalEvent),n>=8&&i(e.options.event+to(n))},e.tryEmit=function(t){if(this.canEmit())return this.emit(t);this.state=32},e.canEmit=function(){for(var t=0;t<this.requireFail.length;){if(!(33&this.requireFail[t].state))return!1;t++}return!0},e.recognize=function(t){var e=er({},t);if(!gr(this.options.enable,[this,e]))return this.reset(),void(this.state=32);56&this.state&&(this.state=1),this.state=this.process(e),30&this.state&&this.tryEmit(e)},e.process=function(t){},e.getTouchAction=function(){},e.reset=function(){},t}(),no=function(t){function e(e){var n;return void 0===e&&(e={}),(n=t.call(this,Zi({event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},e))||this).pTime=!1,n.pCenter=!1,n._timer=null,n._input=null,n.count=0,n}Ji(e,t);var n=e.prototype;return n.getTouchAction=function(){return["manipulation"]},n.process=function(t){var e=this,n=this.options,i=t.pointers.length===n.pointers,r=t.distance<n.threshold,o=t.deltaTime<n.time;if(this.reset(),1&t.eventType&&0===this.count)return this.failTimeout();if(r&&o&&i){if(4!==t.eventType)return this.failTimeout();var a=!this.pTime||t.timeStamp-this.pTime<n.interval,s=!this.pCenter||Tr(this.pCenter,t.center)<n.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,s&&a?this.count+=1:this.count=1,this._input=t,0===this.count%n.taps)return this.hasRequireFailures()?(this._timer=setTimeout((function(){e.state=8,e.tryEmit()}),n.interval),2):8}return 32},n.failTimeout=function(){var t=this;return this._timer=setTimeout((function(){t.state=32}),this.options.interval),32},n.reset=function(){clearTimeout(this._timer)},n.emit=function(){8===this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))},e}(eo),io=function(t){function e(e){return void 0===e&&(e={}),t.call(this,Zi({pointers:1},e))||this}Ji(e,t);var n=e.prototype;return n.attrTest=function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},n.process=function(t){var e=this.state,n=t.eventType,i=6&e,r=this.attrTest(t);return i&&(8&n||!r)?16|e:i||r?4&n?8|e:2&e?4|e:2:32},e}(eo);function ro(t){return 16===t?"down":8===t?"up":2===t?"left":4===t?"right":""}var oo=function(t){function e(e){var n;return void 0===e&&(e={}),(n=t.call(this,Zi({event:"pan",threshold:10,pointers:1,direction:30},e))||this).pX=null,n.pY=null,n}Ji(e,t);var n=e.prototype;return n.getTouchAction=function(){var t=this.options.direction,e=[];return 6&t&&e.push("pan-y"),24&t&&e.push("pan-x"),e},n.directionTest=function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,o=t.deltaX,a=t.deltaY;return r&e.direction||(6&e.direction?(r=0===o?1:o<0?2:4,n=o!==this.pX,i=Math.abs(t.deltaX)):(r=0===a?1:a<0?8:16,n=a!==this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},n.attrTest=function(t){return io.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},n.emit=function(e){this.pX=e.deltaX,this.pY=e.deltaY;var n=ro(e.direction);n&&(e.additionalEvent=this.options.event+n),t.prototype.emit.call(this,e)},e}(io),ao=function(t){function e(e){return void 0===e&&(e={}),t.call(this,Zi({event:"swipe",threshold:10,velocity:.3,direction:30,pointers:1},e))||this}Ji(e,t);var n=e.prototype;return n.getTouchAction=function(){return oo.prototype.getTouchAction.call(this)},n.attrTest=function(e){var n,i=this.options.direction;return 30&i?n=e.overallVelocity:6&i?n=e.overallVelocityX:24&i&&(n=e.overallVelocityY),t.prototype.attrTest.call(this,e)&&i&e.offsetDirection&&e.distance>this.options.threshold&&e.maxPointers===this.options.pointers&&or(n)>this.options.velocity&&4&e.eventType},n.emit=function(t){var e=ro(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)},e}(io),so=function(t){function e(e){return void 0===e&&(e={}),t.call(this,Zi({event:"pinch",threshold:0,pointers:2},e))||this}Ji(e,t);var n=e.prototype;return n.getTouchAction=function(){return["none"]},n.attrTest=function(e){return t.prototype.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||2&this.state)},n.emit=function(e){if(1!==e.scale){var n=e.scale<1?"in":"out";e.additionalEvent=this.options.event+n}t.prototype.emit.call(this,e)},e}(io),uo=function(t){function e(e){return void 0===e&&(e={}),t.call(this,Zi({event:"rotate",threshold:0,pointers:2},e))||this}Ji(e,t);var n=e.prototype;return n.getTouchAction=function(){return["none"]},n.attrTest=function(e){return t.prototype.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||2&this.state)},e}(io),ho=function(t){function e(e){var n;return void 0===e&&(e={}),(n=t.call(this,Zi({event:"press",pointers:1,time:251,threshold:9},e))||this)._timer=null,n._input=null,n}Ji(e,t);var n=e.prototype;return n.getTouchAction=function(){return["auto"]},n.process=function(t){var e=this,n=this.options,i=t.pointers.length===n.pointers,r=t.distance<n.threshold,o=t.deltaTime>n.time;if(this._input=t,!r||!i||12&t.eventType&&!o)this.reset();else if(1&t.eventType)this.reset(),this._timer=setTimeout((function(){e.state=8,e.tryEmit()}),n.time);else if(4&t.eventType)return 8;return 32},n.reset=function(){clearTimeout(this._timer)},n.emit=function(t){8===this.state&&(t&&4&t.eventType?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=ar(),this.manager.emit(this.options.event,this._input)))},e}(eo),co={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},lo=[[uo,{enable:!1}],[so,{enable:!1},["rotate"]],[ao,{direction:6}],[oo,{direction:6},["swipe"]],[no],[no,{event:"doubletap",taps:2},["tap"]],[ho]];function fo(t,e){var n,i=t.element;i.style&&(mr(t.options.cssProps,(function(r,o){n=sr(i.style,o),e?(t.oldCssProps[n]=i.style[n],i.style[n]=r):i.style[n]=t.oldCssProps[n]||""})),e||(t.oldCssProps={}))}var po=function(){function t(t,e){var n,i=this;this.options=er({},co,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((n=this).options.inputClass||(fr?zr:dr?Yr:lr?Kr:Br))(n,Ar),this.touchAction=new yr(this,this.options.touchAction),fo(this,!0),mr(this.options.recognizers,(function(t){var e=i.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}var e=t.prototype;return e.set=function(t){return er(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},e.stop=function(t){this.session.stopped=t?2:1},e.recognize=function(t){var e=this.session;if(!e.stopped){var n;this.touchAction.preventDefaults(t);var i=this.recognizers,r=e.curRecognizer;(!r||r&&8&r.state)&&(e.curRecognizer=null,r=null);for(var o=0;o<i.length;)n=i[o],2===e.stopped||r&&n!==r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&14&n.state&&(e.curRecognizer=n,r=n),o++}},e.get=function(t){if(t instanceof eo)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event===t)return e[n];return null},e.add=function(t){if(Zr(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},e.remove=function(t){if(Zr(t,"remove",this))return this;var e=this.get(t);if(t){var n=this.recognizers,i=Lr(n,e);-1!==i&&(n.splice(i,1),this.touchAction.update())}return this},e.on=function(t,e){if(void 0===t||void 0===e)return this;var n=this.handlers;return mr(Ir(t),(function(t){n[t]=n[t]||[],n[t].push(e)})),this},e.off=function(t,e){if(void 0===t)return this;var n=this.handlers;return mr(Ir(t),(function(t){e?n[t]&&n[t].splice(Lr(n[t],e),1):delete n[t]})),this},e.emit=function(t,e){this.options.domEvents&&function(t,e){var n=document.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},e.destroy=function(){this.element&&fo(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null},t}(),vo={touchstart:1,touchmove:2,touchend:4,touchcancel:8},mo=function(t){function e(){var n,i=e.prototype;return i.evTarget="touchstart",i.evWin="touchstart touchmove touchend touchcancel",(n=t.apply(this,arguments)||this).started=!1,n}return Ji(e,t),e.prototype.handler=function(t){var e=vo[t.type];if(1===e&&(this.started=!0),this.started){var n=go.call(this,t,e);12&e&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:"touch",srcEvent:t})}},e}(Dr);function go(t,e){var n=Qr(t.touches),i=Qr(t.changedTouches);return 12&e&&(n=Wr(n.concat(i),"identifier",!0)),[n,i]}function _o(t,e,n){var i="DEPRECATED METHOD: "+e+"\n"+n+" AT \n";return function(){var e=new Error("get-stack-trace"),n=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",r=window.console&&(window.console.warn||window.console.log);return r&&r.call(window.console,i,n),t.apply(this,arguments)}}var yo=_o((function(t,e,n){for(var i=Object.keys(e),r=0;r<i.length;)(!n||n&&void 0===t[i[r]])&&(t[i[r]]=e[i[r]]),r++;return t}),"extend","Use `assign`."),xo=_o((function(t,e){return yo(t,e,!0)}),"merge","Use `assign`.");function wo(t,e,n){var i,r=e.prototype;(i=t.prototype=Object.create(r)).constructor=t,i._super=r,n&&er(i,n)}function Eo(t,e){return function(){return t.apply(e,arguments)}}var To=function(){var t=function(t,e){return void 0===e&&(e={}),new po(t,Zi({recognizers:lo.concat()},e))};return t.VERSION="2.0.17-rc",t.DIRECTION_ALL=30,t.DIRECTION_DOWN=16,t.DIRECTION_LEFT=2,t.DIRECTION_RIGHT=4,t.DIRECTION_UP=8,t.DIRECTION_HORIZONTAL=6,t.DIRECTION_VERTICAL=24,t.DIRECTION_NONE=1,t.DIRECTION_DOWN=16,t.INPUT_START=1,t.INPUT_MOVE=2,t.INPUT_END=4,t.INPUT_CANCEL=8,t.STATE_POSSIBLE=1,t.STATE_BEGAN=2,t.STATE_CHANGED=4,t.STATE_ENDED=8,t.STATE_RECOGNIZED=8,t.STATE_CANCELLED=16,t.STATE_FAILED=32,t.Manager=po,t.Input=Dr,t.TouchAction=yr,t.TouchInput=Yr,t.MouseInput=Br,t.PointerEventInput=zr,t.TouchMouseInput=Kr,t.SingleTouchInput=mo,t.Recognizer=eo,t.AttrRecognizer=io,t.Tap=no,t.Pan=oo,t.Swipe=ao,t.Pinch=so,t.Rotate=uo,t.Press=ho,t.on=Or,t.off=Sr,t.each=mr,t.merge=xo,t.extend=yo,t.bindFn=Eo,t.assign=er,t.inherit=wo,t.bindFn=Eo,t.prefixed=sr,t.toArray=Qr,t.inArray=Lr,t.uniqueArray=Wr,t.splitStr=Ir,t.boolOrFn=gr,t.hasParent=xr,t.addEventListeners=Or,t.removeEventListeners=Sr,t.defaults=er({},co,{preset:lo}),t}();To.defaults;function Mo(t){return void 0===t}var bo=function(){var t=function(){function t(){this._eventHandler={},this.options={}}var e=t.prototype;return e.trigger=function(t,e){void 0===e&&(e={});var n=this._eventHandler[t]||[],i=n.length>0;if(!i)return!0;n=n.concat(),e.eventType=t;var r=!1,o=[e],a=0;e.stop=function(){r=!0},e.currentTarget=this;for(var s=arguments.length,u=new Array(s>2?s-2:0),h=2;h<s;h++)u[h-2]=arguments[h];for(u.length>=1&&(o=o.concat(u)),a=0;n[a];a++)n[a].apply(this,o);return!r},e.once=function(t,e){if("object"==typeof t&&Mo(e)){var n,i=t;for(n in i)this.once(n,i[n]);return this}if("string"==typeof t&&"function"==typeof e){var r=this;this.on(t,(function n(){for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];e.apply(r,o),r.off(t,n)}))}return this},e.hasOn=function(t){return!!this._eventHandler[t]},e.on=function(t,e){if("object"==typeof t&&Mo(e)){var n,i=t;for(n in i)this.on(n,i[n]);return this}if("string"==typeof t&&"function"==typeof e){var r=this._eventHandler[t];Mo(r)&&(this._eventHandler[t]=[],r=this._eventHandler[t]),r.push(e)}return this},e.off=function(t,e){if(Mo(t))return this._eventHandler={},this;if(Mo(e)){if("string"==typeof t)return this._eventHandler[t]=void 0,this;var n,i=t;for(n in i)this.off(n,i[n]);return this}var r,o,a=this._eventHandler[t];if(a)for(r=0;void 0!==(o=a[r]);r++)if(o===e){a=a.splice(r,1);break}return this},t}();return t.VERSION="2.1.2",t}(),Ro=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};function Po(t,e){function n(){this.constructor=t}Ro(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var Ao,Io=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t};function Oo(t,e,n,i){var r=t,o=[n[0]?e[0]:i?e[0]-i[0]:e[0],n[1]?e[1]:i?e[1]+i[1]:e[1]];return r=Math.max(o[0],r),r=Math.min(o[1],r)}function So(t,e){return t<e[0]||t>e[1]}function Co(t,e,n){return n[1]&&t>e[1]||n[0]&&t<e[0]}function Do(t,e,n){var i=t,r=e[0],o=e[1],a=o-r;return n[1]&&t>o&&(i=(i-o)%a+r),n[0]&&t<r&&(i=(i-r)%a+o),i}function Lo(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e}function Fo(t,e){var n;if(void 0===e&&(e=!1),"string"==typeof t){if(t.match(/^<([a-z]+)\s*([^>]*)>/)){var i=document.createElement("div");i.innerHTML=t,n=Lo(i.childNodes)}else n=Lo(document.querySelectorAll(t));e||(n=n.length>=1?n[0]:void 0)}else t===Ao?n=t:!t.nodeName||1!==t.nodeType&&9!==t.nodeType?"jQuery"in Ao&&t instanceof jQuery||t.constructor.prototype.jquery?n=e?t.toArray():t.get(0):Array.isArray(t)&&(n=t.map((function(t){return Fo(t)})),e||(n=n.length>=1?n[0]:void 0)):n=t;return n}var Vo=(Ao="undefined"==typeof window?{}:window).requestAnimationFrame||Ao.webkitRequestAnimationFrame,No=Ao.cancelAnimationFrame||Ao.webkitCancelAnimationFrame;if(Vo&&!No){var Uo={},zo=Vo;Vo=function(t){var e=zo((function(n){Uo[e]&&t(n)}));return Uo[e]=!0,e},No=function(t){delete Uo[t]}}else Vo&&No||(Vo=function(t){return Ao.setTimeout((function(){t(Ao.performance&&Ao.performance.now&&Ao.performance.now()||(new Date).getTime())}),16)},No=Ao.clearTimeout);function Qo(t,e){var n={};for(var i in t)i&&(n[i]=e(t[i],i));return n}function Wo(t,e){var n={};for(var i in t)i&&e(t[i],i)&&(n[i]=t[i]);return n}function ko(t,e){for(var n in t)if(n&&!e(t[n],n))return!1;return!0}function Yo(t,e){return ko(t,(function(t,n){return t===e[n]}))}var Xo={};function qo(t,e){var n,i;return Xo[e]||(Xo[e]=(i=(n=e)<1?Math.pow(10,Go(n)):1,function(t){return 0===n?0:Math.round(Math.round(t/n)*n*i)/i})),Xo[e](t)}function Bo(t,e){if(!t||!e)return t;var n="number"==typeof e;return Qo(t,(function(t,i){return qo(t,n?e:e[i])}))}function Go(t){if(!isFinite(t))return 0;var e=t+"";if(e.indexOf("e")>=0){for(var n=0,i=1;Math.round(t*i)/i!==t;)i*=10,n++;return n}return e.indexOf(".")>=0?e.length-e.indexOf(".")-1:0}function Ho(t,e,n){return Math.max(Math.min(t,n),e)}var jo=function(){function t(t){var e=t.options,n=t.itm,i=t.em,r=t.axm;this.options=e,this.itm=n,this.em=i,this.axm=r,this.animationEnd=this.animationEnd.bind(this)}var e=t.prototype;return e.getDuration=function(t,e,n){var i,r=this;if(void 0!==n)i=n;else{var o=Qo(e,(function(e,n){return function(t,e){var n=Math.sqrt(t/e*2);return n<100?0:n}(Math.abs(e-t[n]),r.options.deceleration)}));i=Object.keys(o).reduce((function(t,e){return Math.max(t,o[e])}),-1/0)}return Ho(i,this.options.minimumDuration,this.options.maximumDuration)},e.createAnimationParam=function(t,e,n){var i=this.axm.get(),r=t,o=n&&n.event||null;return{depaPos:i,destPos:r,duration:Ho(e,this.options.minimumDuration,this.options.maximumDuration),delta:this.axm.getDelta(i,r),inputEvent:o,input:n&&n.input||null,isTrusted:!!o,done:this.animationEnd}},e.grab=function(t,e){if(this._animateParam&&t.length){var n=this.axm.get(t),i=this.axm.map(n,(function(t,e){return Do(t,e.range,e.circular)}));ko(i,(function(t,e){return n[e]===t}))||this.em.triggerChange(i,!1,n,e,!!e),this._animateParam=null,this._raf&&(r=this._raf,No(r)),this._raf=null,this.em.triggerAnimationEnd(!(!e||!e.event))}var r},e.getEventInfo=function(){return this._animateParam&&this._animateParam.input&&this._animateParam.inputEvent?{input:this._animateParam.input,event:this._animateParam.inputEvent}:null},e.restore=function(t){var e=this.axm.get(),n=this.axm.map(e,(function(t,e){return Math.min(e.range[1],Math.max(e.range[0],t))}));this.animateTo(n,this.getDuration(e,n),t)},e.animationEnd=function(){var t=this.getEventInfo();this._animateParam=null;var e=this.axm.filter(this.axm.get(),(function(t,e){return Co(t,e.range,e.circular)}));Object.keys(e).length>0&&this.setTo(this.axm.map(e,(function(t,e){return Do(t,e.range,e.circular)}))),this.itm.setInterrupt(!1),this.em.triggerAnimationEnd(!!t),this.axm.isOutside()?this.restore(t):this.finish(!!t)},e.finish=function(t){this._animateParam=null,this.itm.setInterrupt(!1),this.em.triggerFinish(t)},e.animateLoop=function(t,e){if(t.duration){this._animateParam=Io({},t);var n=this._animateParam,i=this,r=n.destPos,o=n.depaPos,a=0,s=Qo(o,(function(t,e){return t<=r[e]?1:-1})),u=Qo(r,(function(t){return t})),h=(new Date).getTime();n.startTime=h,function c(){i._raf=null;var l=(new Date).getTime(),f=(l-n.startTime)/t.duration,d=i.easing(f),p=i.axm.map(o,(function(t,e,i){var u=f>=1?r[i]:t+n.delta[i]*(d-a),h=Do(u,e.range,e.circular);if(u!==h){var c=s[i]*(e.range[1]-e.range[0]);r[i]-=c,o[i]-=c}return h})),v=!i.em.triggerChange(p,!1,o);if(o=p,h=l,a=d,d>=1)return Yo(r=i.getFinalPos(r,u),i.axm.get(Object.keys(r)))||i.em.triggerChange(r,!0,o),void e();v?i.finish(!1):i._raf=Vo(c)}()}else this.em.triggerChange(t.destPos,!0),e()},e.getFinalPos=function(t,e){var n=this;return Qo(t,(function(t,i){return t>=e[i]-1e-6&&t<=e[i]+1e-6?e[i]:qo(t,n.getRoundUnit(t,i))}))},e.getRoundUnit=function(t,e){var n,i=this.options.round,r=null;if(!i){var o=this.axm.getAxisOptions(e);n=Math.max(Go(o.range[0]),Go(o.range[1]),Go(t)),r=1/Math.pow(10,n)}return r||i},e.getUserControll=function(t){var e=t.setTo();return e.destPos=this.axm.get(e.destPos),e.duration=Ho(e.duration,this.options.minimumDuration,this.options.maximumDuration),e},e.animateTo=function(t,e,n){var i=this,r=this.createAnimationParam(t,e,n),o=Io({},r.depaPos),a=this.em.triggerAnimationStart(r),s=this.getUserControll(r);if(!a&&this.axm.every(s.destPos,(function(t,e){return Co(t,e.range,e.circular)}))&&console.warn("You can't stop the 'animation' event when 'circular' is true."),a&&!Yo(s.destPos,o)){var u=n&&n.event||null;this.animateLoop({depaPos:o,destPos:s.destPos,duration:s.duration,delta:this.axm.getDelta(o,s.destPos),isTrusted:!!u,inputEvent:u,input:n&&n.input||null},(function(){return i.animationEnd()}))}},e.easing=function(t){return t>1?1:this.options.easing(t)},e.setTo=function(t,e){void 0===e&&(e=0);var n=Object.keys(t);this.grab(n);var i=this.axm.get(n);if(Yo(t,i))return this;this.itm.setInterrupt(!0);var r=Wo(t,(function(t,e){return i[e]!==t}));return Object.keys(r).length?(Yo(r=this.axm.map(r,(function(t,e){var n=e.range,i=e.circular;return i&&(i[0]||i[1])?t:Oo(t,n,i)})),i)||(e>0?this.animateTo(r,e):(this.em.triggerChange(r),this.finish(!1))),this):this},e.setBy=function(t,e){return void 0===e&&(e=0),this.setTo(Qo(this.axm.get(Object.keys(t)),(function(e,n){return e+t[n]})),e)},t}(),Ko=function(){function t(t){this.axes=t}var e=t.prototype;return e.triggerHold=function(t,e){var n=this.getRoundPos(t).roundPos;this.axes.trigger("hold",{pos:n,input:e.input||null,inputEvent:e.event||null,isTrusted:!0})},e.triggerRelease=function(t){var e=this.getRoundPos(t.destPos,t.depaPos),n=e.roundPos,i=e.roundDepa;t.destPos=n,t.depaPos=i,t.setTo=this.createUserControll(t.destPos,t.duration),this.axes.trigger("release",t)},e.triggerChange=function(t,e,n,i,r){void 0===r&&(r=!1);var o=this.am,a=o.axm,s=o.getEventInfo(),u=this.getRoundPos(t,n),h=u.roundPos,c=u.roundDepa,l=a.moveTo(h,c),f=i&&i.event||s&&s.event||null,d={pos:l.pos,delta:l.delta,holding:r,inputEvent:f,isTrusted:!!f,input:i&&i.input||s&&s.input||null,set:f?this.createUserControll(l.pos):function(){}},p=this.axes.trigger("change",d);return f&&a.set(d.set().destPos),p},e.triggerAnimationStart=function(t){var e=this.getRoundPos(t.destPos,t.depaPos),n=e.roundPos,i=e.roundDepa;return t.destPos=n,t.depaPos=i,t.setTo=this.createUserControll(t.destPos,t.duration),this.axes.trigger("animationStart",t)},e.triggerAnimationEnd=function(t){void 0===t&&(t=!1),this.axes.trigger("animationEnd",{isTrusted:t})},e.triggerFinish=function(t){void 0===t&&(t=!1),this.axes.trigger("finish",{isTrusted:t})},e.createUserControll=function(t,e){void 0===e&&(e=0);var n={destPos:Io({},t),duration:e};return function(t,e){return t&&(n.destPos=Io({},t)),void 0!==e&&(n.duration=e),n}},e.setAnimationManager=function(t){this.am=t},e.destroy=function(){this.axes.off()},e.getRoundPos=function(t,e){var n=this.axes.options.round;return{roundPos:Bo(t,n),roundDepa:Bo(e,n)}},t}(),Zo=function(){function t(t){this.options=t,this._prevented=!1}var e=t.prototype;return e.isInterrupting=function(){return this.options.interruptable||this._prevented},e.isInterrupted=function(){return!this.options.interruptable&&this._prevented},e.setInterrupt=function(t){!this.options.interruptable&&(this._prevented=t)},t}(),Jo=function(){function t(t,e){var n=this;this.axis=t,this.options=e,this._complementOptions(),this._pos=Object.keys(this.axis).reduce((function(t,e){return t[e]=n.axis[e].range[0],t}),{})}var e=t.prototype;return e._complementOptions=function(){var t=this;Object.keys(this.axis).forEach((function(e){t.axis[e]=Io({range:[0,100],bounce:[0,0],circular:[!1,!1]},t.axis[e]),["bounce","circular"].forEach((function(n){var i=t.axis,r=i[e][n];/string|number|boolean/.test(typeof r)&&(i[e][n]=[r,r])}))}))},e.getDelta=function(t,e){var n=this.get(t);return Qo(this.get(e),(function(t,e){return t-n[e]}))},e.get=function(t){var e=this;return t&&Array.isArray(t)?t.reduce((function(t,n){return n&&n in e._pos&&(t[n]=e._pos[n]),t}),{}):Io({},this._pos,t||{})},e.moveTo=function(t,e){void 0===e&&(e=this._pos);var n=Qo(this._pos,(function(n,i){return i in t&&i in e?t[i]-e[i]:0}));return this.set(this.map(t,(function(t,e){return e?Do(t,e.range,e.circular):0}))),{pos:Io({},this._pos),delta:n}},e.set=function(t){for(var e in t)e&&e in this._pos&&(this._pos[e]=t[e])},e.every=function(t,e){var n=this.axis;return ko(t,(function(t,i){return e(t,n[i],i)}))},e.filter=function(t,e){var n=this.axis;return Wo(t,(function(t,i){return e(t,n[i],i)}))},e.map=function(t,e){var n=this.axis;return Qo(t,(function(t,i){return e(t,n[i],i)}))},e.isOutside=function(t){return!this.every(t?this.get(t):this._pos,(function(t,e){return!So(t,e.range)}))},e.getAxisOptions=function(t){return this.axis[t]},t}(),$o=function(){function t(t){var e=t.options,n=t.itm,i=t.em,r=t.axm,o=t.am;this.isOutside=!1,this.moveDistance=null,this.isStopped=!1,this.options=e,this.itm=n,this.em=i,this.axm=r,this.am=o}var e=t.prototype;return e.atOutside=function(t){var e=this;if(this.isOutside)return this.axm.map(t,(function(t,e){var n=e.range[0]-e.bounce[0],i=e.range[1]+e.bounce[1];return t>i?i:t<n?n:t}));var n=this.am.easing(1e-5)/1e-5;return this.axm.map(t,(function(t,i){var r=i.range[0],o=i.range[1],a=i.bounce,s=i.circular;return s&&(s[0]||s[1])?t:t<r?r-e.am.easing((r-t)/(a[0]*n))*a[0]:t>o?o+e.am.easing((t-o)/(a[1]*n))*a[1]:t}))},e.get=function(t){return this.axm.get(t.axes)},e.hold=function(t,e){if(!this.itm.isInterrupted()&&t.axes.length){var n={input:t,event:e};this.isStopped=!1,this.itm.setInterrupt(!0),this.am.grab(t.axes,n),!this.moveDistance&&this.em.triggerHold(this.axm.get(),n),this.isOutside=this.axm.isOutside(t.axes),this.moveDistance=this.axm.get(t.axes)}},e.change=function(t,e,n){if(!this.isStopped&&this.itm.isInterrupting()&&!this.axm.every(n,(function(t){return 0===t}))){var i,r=this.moveDistance||this.axm.get(t.axes);i=Qo(r,(function(t,e){return t+(n[e]||0)})),this.moveDistance&&(this.moveDistance=i),this.isOutside&&this.axm.every(r,(function(t,e){return!So(t,e.range)}))&&(this.isOutside=!1),r=this.atOutside(r),i=this.atOutside(i),!this.em.triggerChange(i,!1,r,{input:t,event:e},!0)&&(this.isStopped=!0,this.moveDistance=null,this.am.finish(!1))}},e.release=function(t,e,n,i){if(!this.isStopped&&this.itm.isInterrupting()&&this.moveDistance){var r=this.axm.get(t.axes),o=this.axm.get(),a=this.axm.get(this.axm.map(n,(function(t,e,n){return e.circular&&(e.circular[0]||e.circular[1])?r[n]+t:Oo(r[n]+t,e.range,e.circular,e.bounce)}))),s=this.am.getDuration(a,r,i);0===s&&(a=Io({},o));var u={depaPos:o,destPos:a,duration:s,delta:this.axm.getDelta(o,a),inputEvent:e,input:t,isTrusted:!0};this.em.triggerRelease(u),this.moveDistance=null;var h=this.am.getUserControll(u),c=Yo(h.destPos,o),l={input:t,event:e};c||0===h.duration?(!c&&this.em.triggerChange(h.destPos,!1,o,l,!0),this.itm.setInterrupt(!1),this.axm.isOutside()?this.am.restore(l):this.em.triggerFinish(!0)):this.am.animateTo(h.destPos,h.duration,l)}},t}(),ta=function(){if("undefined"==typeof document)return"";for(var t=(document.head||document.getElementsByTagName("head")[0]).style,e=["transform","webkitTransform","msTransform","mozTransform"],n=0,i=e.length;n<i;n++)if(e[n]in t)return e[n];return""}(),ea=function(t){function e(e,n,i){void 0===e&&(e={}),void 0===n&&(n={});var r=t.call(this)||this;return r.axis=e,r._inputs=[],r.options=Io({easing:function(t){return 1-Math.pow(1-t,3)},interruptable:!0,maximumDuration:1/0,minimumDuration:0,deceleration:6e-4,round:null},n),r.itm=new Zo(r.options),r.axm=new Jo(r.axis,r.options),r.em=new Ko(r),r.am=new jo(r),r.io=new $o(r),r.em.setAnimationManager(r.am),i&&r.em.triggerChange(i),r}Po(e,t);var n=e.prototype;return n.connect=function(t,e){var n;if(n="string"==typeof t?t.split(" "):t.concat(),~this._inputs.indexOf(e)&&this.disconnect(e),"hammer"in e){var i=this._inputs.filter((function(t){return t.hammer&&t.element===e.element}));i.length&&(e.hammer=i[0].hammer)}return e.mapAxes(n),e.connect(this.io),this._inputs.push(e),this},n.disconnect=function(t){if(t){var e=this._inputs.indexOf(t);e>=0&&(this._inputs[e].disconnect(),this._inputs.splice(e,1))}else this._inputs.forEach((function(t){return t.disconnect()})),this._inputs=[];return this},n.get=function(t){return this.axm.get(t)},n.setTo=function(t,e){return void 0===e&&(e=0),this.am.setTo(t,e),this},n.setBy=function(t,e){return void 0===e&&(e=0),this.am.setBy(t,e),this},n.isBounceArea=function(t){return this.axm.isOutside(t)},n.destroy=function(){this.disconnect(),this.em.destroy()},e.VERSION="2.6.0",e.TRANSFORM=ta,e.DIRECTION_NONE=1,e.DIRECTION_LEFT=2,e.DIRECTION_RIGHT=4,e.DIRECTION_UP=8,e.DIRECTION_DOWN=16,e.DIRECTION_HORIZONTAL=6,e.DIRECTION_VERTICAL=24,e.DIRECTION_ALL=30,e}(bo),na="PointerEvent"in Ao||"MSPointerEvent"in Ao,ia="ontouchstart"in Ao,ra="_EGJS_AXES_INPUTTYPE_";function oa(t,e){return e.reduce((function(e,n,i){return t[i]&&(e[t[i]]=n),e}),{})}function aa(t,e){try{return new po(t,Io({},e))}catch(t){return null}}function sa(t){void 0===t&&(t=[]);var e=!1,n=!1,i=!1;return t.forEach((function(t){switch(t){case"mouse":n=!0;break;case"touch":e=ia;break;case"pointer":i=na}})),i?zr:e&&n?Kr:e?Yr:n?Br:null}function ua(t,e,n){return n?!!(30===e||e&t&&n&t):!!(e&t)}var ha=function(){function t(t,e){if(this.axes=[],this.hammer=null,this.element=null,this.panRecognizer=null,void 0===po)throw new Error("The Hammerjs must be loaded before eg.Axes.PanInput.\nhttp://hammerjs.github.io/");this.element=Fo(t),this.options=Io({inputType:["touch","mouse","pointer"],scale:[1,1],thresholdAngle:45,threshold:0,hammerManagerOptions:{cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",userDrag:"none"}}},e),this.onHammerInput=this.onHammerInput.bind(this),this.onPanmove=this.onPanmove.bind(this),this.onPanend=this.onPanend.bind(this)}var e=t.prototype;return e.mapAxes=function(t){var e=!!t[0],n=!!t[1];this._direction=e&&n?30:e?6:n?24:1,this.axes=t},e.connect=function(t){var e={direction:this._direction,threshold:this.options.threshold};if(this.hammer)this.removeRecognizer(),this.dettachEvent();else{var n=this.element[ra];n||(n=String(Math.round(Math.random()*(new Date).getTime())));var i=sa(this.options.inputType);if(!i)throw new Error("Wrong inputType parameter!");this.hammer=aa(this.element,Io({inputClass:i},this.options.hammerManagerOptions)),this.element[ra]=n}return this.panRecognizer=new oo(e),this.hammer.add(this.panRecognizer),this.attachEvent(t),this},e.disconnect=function(){return this.removeRecognizer(),this.hammer&&this.dettachEvent(),this._direction=1,this},e.destroy=function(){this.disconnect(),this.hammer&&0===this.hammer.recognizers.length&&this.hammer.destroy(),delete this.element[ra],this.element=null,this.hammer=null},e.enable=function(){return this.hammer&&(this.hammer.get("pan").options.enable=!0),this},e.disable=function(){return this.hammer&&(this.hammer.get("pan").options.enable=!1),this},e.isEnable=function(){return!(!this.hammer||!this.hammer.get("pan").options.enable)},e.removeRecognizer=function(){this.hammer&&this.panRecognizer&&(this.hammer.remove(this.panRecognizer),this.panRecognizer=null)},e.onHammerInput=function(t){this.isEnable()&&(t.isFirst?this.observer.hold(this,t):t.isFinal&&this.onPanend(t))},e.onPanmove=function(t){var e=function(t,e){if(e<0||e>90)return 1;var n=Math.abs(t);return n>e&&n<180-e?24:6}(t.angle,this.options.thresholdAngle),n=this.hammer.session.prevInput;n?(t.offsetX=t.deltaX-n.deltaX,t.offsetY=t.deltaY-n.deltaY):(t.offsetX=0,t.offsetY=0);var i=this.getOffset([t.offsetX,t.offsetY],[ua(6,this._direction,e),ua(24,this._direction,e)]),r=i.some((function(t){return 0!==t}));r&&(t.srcEvent.preventDefault(),t.srcEvent.stopPropagation()),t.preventSystemEvent=r,r&&this.observer.change(this,t,oa(this.axes,i))},e.onPanend=function(t){var e,n,i,r,o=this.getOffset([Math.abs(t.velocityX)*(t.deltaX<0?-1:1),Math.abs(t.velocityY)*(t.deltaY<0?-1:1)],[ua(6,this._direction),ua(24,this._direction)]);e=o,n=this.observer.options.deceleration,i=Math.sqrt(e[0]*e[0]+e[1]*e[1]),r=Math.abs(i/-n),o=[e[0]/2*r,e[1]/2*r],this.observer.release(this,t,oa(this.axes,o))},e.attachEvent=function(t){this.observer=t,this.hammer.on("hammer.input",this.onHammerInput).on("panstart panmove",this.onPanmove)},e.dettachEvent=function(){this.hammer.off("hammer.input",this.onHammerInput).off("panstart panmove",this.onPanmove),this.observer=null},e.getOffset=function(t,e){var n=[0,0],i=this.options.scale;return e[0]&&(n[0]=t[0]*i[0]),e[1]&&(n[1]=t[1]*i[1]),n},t}(),ca=function(){function t(t,e){if(this.axes=[],this.hammer=null,this.element=null,this._base=null,this._prev=null,this.pinchRecognizer=null,void 0===po)throw new Error("The Hammerjs must be loaded before eg.Axes.PinchInput.\nhttp://hammerjs.github.io/");this.element=Fo(t),this.options=Io({scale:1,threshold:0,inputType:["touch","pointer"],hammerManagerOptions:{cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",userDrag:"none"}}},e),this.onPinchStart=this.onPinchStart.bind(this),this.onPinchMove=this.onPinchMove.bind(this),this.onPinchEnd=this.onPinchEnd.bind(this)}var e=t.prototype;return e.mapAxes=function(t){this.axes=t},e.connect=function(t){var e={threshold:this.options.threshold};if(this.hammer)this.removeRecognizer(),this.dettachEvent();else{var n=this.element[ra];n||(n=String(Math.round(Math.random()*(new Date).getTime())));var i=sa(this.options.inputType);if(!i)throw new Error("Wrong inputType parameter!");this.hammer=aa(this.element,Io({inputClass:i},this.options.hammerManagerOptions)),this.element[ra]=n}return this.pinchRecognizer=new so(e),this.hammer.add(this.pinchRecognizer),this.attachEvent(t),this},e.disconnect=function(){return this.removeRecognizer(),this.hammer&&(this.hammer.remove(this.pinchRecognizer),this.pinchRecognizer=null,this.dettachEvent()),this},e.destroy=function(){this.disconnect(),this.hammer&&0===this.hammer.recognizers.length&&this.hammer.destroy(),delete this.element[ra],this.element=null,this.hammer=null},e.removeRecognizer=function(){this.hammer&&this.pinchRecognizer&&(this.hammer.remove(this.pinchRecognizer),this.pinchRecognizer=null)},e.onPinchStart=function(t){this._base=this.observer.get(this)[this.axes[0]];var e=this.getOffset(t.scale);this.observer.hold(this,t),this.observer.change(this,t,oa(this.axes,[e])),this._prev=t.scale},e.onPinchMove=function(t){var e=this.getOffset(t.scale,this._prev);this.observer.change(this,t,oa(this.axes,[e])),this._prev=t.scale},e.onPinchEnd=function(t){var e=this.getOffset(t.scale,this._prev);this.observer.change(this,t,oa(this.axes,[e])),this.observer.release(this,t,oa(this.axes,[0]),0),this._base=null,this._prev=null},e.getOffset=function(t,e){return void 0===e&&(e=1),this._base*(t-e)*this.options.scale},e.attachEvent=function(t){this.observer=t,this.hammer.on("pinchstart",this.onPinchStart).on("pinchmove",this.onPinchMove).on("pinchend",this.onPinchEnd)},e.dettachEvent=function(){this.hammer.off("pinchstart",this.onPinchStart).off("pinchmove",this.onPinchMove).off("pinchend",this.onPinchEnd),this.observer=null,this._prev=null},e.enable=function(){return this.hammer&&(this.hammer.get("pinch").options.enable=!0),this},e.disable=function(){return this.hammer&&(this.hammer.get("pinch").options.enable=!1),this},e.isEnable=function(){return!(!this.hammer||!this.hammer.get("pinch").options.enable)},t}(),la=function(){function t(t,e){this.axes=[],this.element=null,this._isEnabled=!1,this._isHolded=!1,this._timer=null,this.element=Fo(t),this.options=Io({scale:1,useNormalized:!0},e),this.onWheel=this.onWheel.bind(this)}var e=t.prototype;return e.mapAxes=function(t){this.axes=t},e.connect=function(t){return this.dettachEvent(),this.attachEvent(t),this},e.disconnect=function(){return this.dettachEvent(),this},e.destroy=function(){this.disconnect(),this.element=null},e.onWheel=function(t){var e=this;if(this._isEnabled&&(t.preventDefault(),0!==t.deltaY)){this._isHolded||(this.observer.hold(this,t),this._isHolded=!0);var n=(t.deltaY>0?-1:1)*this.options.scale*(this.options.useNormalized?1:Math.abs(t.deltaY));this.observer.change(this,t,oa(this.axes,[n])),clearTimeout(this._timer),this._timer=setTimeout((function(){e._isHolded&&(e._isHolded=!1,e.observer.release(e,t,oa(e.axes,[0])))}),50)}},e.attachEvent=function(t){this.observer=t,this.element.addEventListener("wheel",this.onWheel),this._isEnabled=!0},e.dettachEvent=function(){this.element.removeEventListener("wheel",this.onWheel),this._isEnabled=!1,this.observer=null,this._timer&&(clearTimeout(this._timer),this._timer=null)},e.enable=function(){return this._isEnabled=!0,this},e.disable=function(){return this._isEnabled=!1,this},e.isEnable=function(){return this._isEnabled},t}(),fa=function(){function t(t,e){this.axes=[],this.element=null,this._isEnabled=!1,this._isHolded=!1,this._timer=null,this.element=Fo(t),this.options=Io({scale:[1,1]},e),this.onKeydown=this.onKeydown.bind(this),this.onKeyup=this.onKeyup.bind(this)}var e=t.prototype;return e.mapAxes=function(t){this.axes=t},e.connect=function(t){return this.dettachEvent(),"0"!==this.element.getAttribute("tabindex")&&this.element.setAttribute("tabindex","0"),this.attachEvent(t),this},e.disconnect=function(){return this.dettachEvent(),this},e.destroy=function(){this.disconnect(),this.element=null},e.onKeydown=function(t){if(this._isEnabled){var e=!0,n=1,i=-1;switch(t.keyCode){case 37:case 65:n=-1;break;case 39:case 68:break;case 40:case 83:n=-1,i=1;break;case 38:case 87:i=1;break;default:e=!1}if((-1===i&&!this.axes[0]||1===i&&!this.axes[1])&&(e=!1),e){var r=-1===i?[+this.options.scale[0]*n,0]:[0,+this.options.scale[1]*n];this._isHolded||(this.observer.hold(this,event),this._isHolded=!0),clearTimeout(this._timer),this.observer.change(this,event,oa(this.axes,r))}}},e.onKeyup=function(t){var e=this;this._isHolded&&(clearTimeout(this._timer),this._timer=setTimeout((function(){e.observer.release(e,t,oa(e.axes,[0,0])),e._isHolded=!1}),80))},e.attachEvent=function(t){this.observer=t,this.element.addEventListener("keydown",this.onKeydown,!1),this.element.addEventListener("keypress",this.onKeydown,!1),this.element.addEventListener("keyup",this.onKeyup,!1),this._isEnabled=!0},e.dettachEvent=function(){this.element.removeEventListener("keydown",this.onKeydown,!1),this.element.removeEventListener("keypress",this.onKeydown,!1),this.element.removeEventListener("keyup",this.onKeyup,!1),this._isEnabled=!1,this.observer=null},e.enable=function(){return this._isEnabled=!0,this},e.disable=function(){return this._isEnabled=!1,this},e.isEnable=function(){return this._isEnabled},t}(),da=ea;function pa(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function va(t,e,n){return e&&pa(t.prototype,e),n&&pa(t,n),t}function ma(){return(ma=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}function ga(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function _a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var ya="undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),xa=ya.document,wa=ya.navigator&&ya.navigator.userAgent||"",Ea=navigator.platform&&/iPad|iPhone|iPod/.test(navigator.platform),Ta=-1!==wa.indexOf("Safari")&&-1===wa.indexOf("Chrome")&&-1!==wa.indexOf("Mac OS X")&&!Ea;/SamsungBrowser/i.test(wa);ya.Float32Array=void 0!==ya.Float32Array?ya.Float32Array:ya.Array;ya.Float32Array;var Ma=ya.getComputedStyle,ba=ya.navigator.userAgent,Ra="ontouchstart"in ya,Pa="ondevicemotion"in ya,Aa=ya.DeviceMotionEvent,Ia=ya.devicePixelRatio,Oa=(function(){for(var t=xa.documentElement.style,e=["transform","webkitTransform","msTransform","mozTransform"],n=0,i=e.length;n<i;n++)if(e[n]in t)return e[n]}(),ya.CSS&&ya.CSS.supports&&ya.CSS.supports("will-change","transform"),!1);function Sa(t){return 180*t/Math.PI}var Ca={isPowerOfTwo:function(t){return t&&0==(t&t-1)}};Ca.extractPitchFromQuat=function(t){var e=function(t){var e=a.fromValues(0,0,1);return a.transformQuat(e,e,t),e}(t);return-1*Math.atan2(e[1],Math.sqrt(Math.pow(e[0],2)+Math.pow(e[2],2)))},Ca.hypot=Math.hypot||function(t,e){return Math.sqrt(t*t+e*e)};var Da={PITCH_DELTA:1,YAW_DELTA_BY_ROLL:2,YAW_DELTA_BY_YAW:3};function La(t,e){var n=t[0]*e[1]-e[0]*t[1];return-Math.atan2(n,u.dot(t,e))}Da[Da.PITCH_DELTA]={targetAxis:[0,1,0],meshPoint:[0,0,1]},Da[Da.YAW_DELTA_BY_ROLL]={targetAxis:[0,1,0],meshPoint:[1,0,0]},Da[Da.YAW_DELTA_BY_YAW]={targetAxis:[1,0,0],meshPoint:[0,0,1]},Ca.yawOffsetBetween=function(t,e){var n=u.fromValues(t[0],t[2]),i=u.fromValues(e[0],e[2]);return u.normalize(n,n),u.normalize(i,i),-La(n,i)},Ca.toDegree=Sa,Ca.getRotationDelta=function(t,e,n){var i=a.fromValues(Da[n].targetAxis[0],Da[n].targetAxis[1],Da[n].targetAxis[2]),r=Da[n].meshPoint,o=s.clone(t),u=s.clone(e);s.normalize(o,o),s.normalize(u,u);var h=a.fromValues(0,0,1),c=a.fromValues(0,0,1);a.transformQuat(h,h,o),a.transformQuat(c,c,u),a.transformQuat(i,i,u);var l,f=a.dot(i,a.cross(a.create(),h,c))>0?1:-1,d=a.fromValues(r[0],r[1],r[2]);l=n!==Da.YAW_DELTA_BY_YAW?a.fromValues(0,f,0):a.fromValues(f,0,0),a.transformQuat(d,d,u),a.transformQuat(l,l,u);var p=d,v=l,m=a.create();a.cross(m,p,v),a.normalize(m,m);var g=m[0],_=m[1],y=m[2];c=a.fromValues(r[0],r[1],r[2]),a.transformQuat(c,c,u),h=a.fromValues(r[0],r[1],r[2]),a.transformQuat(h,h,o);var x=Math.abs(h[0]*g+h[1]*_+h[2]*y),w=a.create();a.subtract(w,h,a.scale(a.create(),m,x));var E=(w[0]*c[0]+w[1]*c[1]+w[2]*c[2])/(a.length(w)*a.length(c));E>1&&(E=1);var T=Math.acos(E),M=a.cross(a.create(),c,w);return x=g*M[0]+_*M[1]+y*M[2],Sa(T*(n!==Da.YAW_DELTA_BY_YAW?x>0?1:-1:x<0?1:-1)*f)},Ca.angleBetweenVec2=La;var Fa=-1,Va=null,Na=null,Ua=/Chrome\/([0-9]+)\.(?:[0-9]*)\.([0-9]*)\.([0-9]*)/i.exec(ba);Ua&&(Fa=parseInt(Ua[1],10),Va=Ua[2],Na=Ua[3]);var za=Fa,Qa=65===Fa&&"3325"===Va&&parseInt(Na,10)<148,Wa=/Android/i.test(ba),ka=[.2,.2],Ya={NONE:"none",YAWPITCH:"yawPitch",VR:"VR"},Xa=function(t){function e(){var e;return(e=t.call(this)||this)._onDeviceMotion=e._onDeviceMotion.bind(_a(e)),e._onDeviceOrientation=e._onDeviceOrientation.bind(_a(e)),e._onChromeWithoutDeviceMotion=e._onChromeWithoutDeviceMotion.bind(_a(e)),e.isWithoutDeviceMotion=Qa,e.isAndroid=Wa,e.stillGyroVec=a.create(),e.rawGyroVec=a.create(),e.adjustedGyroVec=a.create(),e._timer=null,e.lastDevicemotionTimestamp=0,e._isEnabled=!1,e.enable(),e}ga(e,t);var n=e.prototype;return n._onChromeWithoutDeviceMotion=function(t){var e=t.alpha,n=t.beta,i=t.gamma;null!==e&&(e=(e||0)*Math.PI/180,n=(n||0)*Math.PI/180,i=(i||0)*Math.PI/180,this.trigger("devicemotion",{inputEvent:{deviceorientation:{alpha:e,beta:n,gamma:-i}}}))},n._onDeviceOrientation=function(){var t=this;this._timer&&clearTimeout(this._timer),this._timer=setTimeout((function(){(new Date).getTime()-t.lastDevicemotionTimestamp<200&&a.copy(t.stillGyroVec,t.rawGyroVec)}),200)},n._onDeviceMotion=function(t){var e=!(null==t.rotationRate.alpha),n=!(null==t.accelerationIncludingGravity.x);if(0!==t.interval&&e&&n){var i=ma({},t);i.interval=t.interval,i.timeStamp=t.timeStamp,i.type=t.type,i.rotationRate={alpha:t.rotationRate.alpha,beta:t.rotationRate.beta,gamma:t.rotationRate.gamma},i.accelerationIncludingGravity={x:t.accelerationIncludingGravity.x,y:t.accelerationIncludingGravity.y,z:t.accelerationIncludingGravity.z},i.acceleration={x:t.acceleration.x,y:t.acceleration.y,z:t.acceleration.z},this.isAndroid&&(a.set(this.rawGyroVec,t.rotationRate.alpha||0,t.rotationRate.beta||0,t.rotationRate.gamma||0),a.subtract(this.adjustedGyroVec,this.rawGyroVec,this.stillGyroVec),this.lastDevicemotionTimestamp=(new Date).getTime(),i.adjustedRotationRate={alpha:this.adjustedGyroVec[0],beta:this.adjustedGyroVec[1],gamma:this.adjustedGyroVec[2]}),this.trigger("devicemotion",{inputEvent:i})}},n.enable=function(){this.isAndroid&&ya.addEventListener("deviceorientation",this._onDeviceOrientation),this.isWithoutDeviceMotion?ya.addEventListener("deviceorientation",this._onChromeWithoutDeviceMotion):ya.addEventListener("devicemotion",this._onDeviceMotion),this._isEnabled=!0},n.disable=function(){ya.removeEventListener("deviceorientation",this._onDeviceOrientation),ya.removeEventListener("deviceorientation",this._onChromeWithoutDeviceMotion),ya.removeEventListener("devicemotion",this._onDeviceMotion),this._isEnabled=!1},e}(bo);m.a.prototype.run_=function(){if(!this.isOrientationInitialized)return this.accelQ=this.accelToQuaternion_(this.currentAccelMeasurement.sample),this.previousFilterQ.copy(this.accelQ),void(this.isOrientationInitialized=!0);var t=this.currentGyroMeasurement.timestampS-this.previousGyroMeasurement.timestampS,e=this.gyroToQuaternionDelta_(this.currentGyroMeasurement.sample,t);this.gyroIntegralQ.multiply(e),this.filterQ.copy(this.previousFilterQ),this.filterQ.multiply(e);var n=new p.a.Quaternion;n.copy(this.filterQ),n.inverse(),this.estimatedGravity.set(0,0,-1),this.estimatedGravity.applyQuaternion(n),this.estimatedGravity.normalize(),this.measuredGravity.copy(this.currentAccelMeasurement.sample),this.measuredGravity.normalize();var i=new p.a.Quaternion;i.setFromUnitVectors(this.estimatedGravity,this.measuredGravity),i.inverse();var r=new p.a.Quaternion;r.copy(this.filterQ),r.multiply(i),this.filterQ.slerp(r,1-this.kFilter),this.previousFilterQ.copy(this.filterQ),this.isFilterQuaternionInitialized||(this.isFilterQuaternionInitialized=!0)},m.a.prototype.getOrientation=function(){return this.isFilterQuaternionInitialized?this.filterQ:null};var qa=function(t){function e(){var e;return(e=t.call(this)||this).deviceMotion=new Xa,e.accelerometer=new p.a.Vector3,e.gyroscope=new p.a.Vector3,e._onDeviceMotionChange=e._onDeviceMotionChange.bind(_a(e)),e._onScreenOrientationChange=e._onScreenOrientationChange.bind(_a(e)),e.filter=new m.a(.98),e.posePredictor=new c.a(.04),e.filterToWorldQ=new p.a.Quaternion,e.isFirefoxAndroid=f.a.isFirefoxAndroid(),e.isIOS=f.a.isIOS(),e.isChromeUsingDegrees=za>=66,e._isEnabled=!1,e.isIOS?e.filterToWorldQ.setFromAxisAngle(new p.a.Vector3(1,0,0),Math.PI/2):e.filterToWorldQ.setFromAxisAngle(new p.a.Vector3(1,0,0),-Math.PI/2),e.inverseWorldToScreenQ=new p.a.Quaternion,e.worldToScreenQ=new p.a.Quaternion,e.originalPoseAdjustQ=new p.a.Quaternion,e.originalPoseAdjustQ.setFromAxisAngle(new p.a.Vector3(0,0,1),-ya.orientation*Math.PI/180),e._setScreenTransform(),f.a.isLandscapeMode()&&e.filterToWorldQ.multiply(e.inverseWorldToScreenQ),e.resetQ=new p.a.Quaternion,e.deviceMotion.on("devicemotion",e._onDeviceMotionChange),e.enable(),e}ga(e,t);var n=e.prototype;return n.enable=function(){this.isEnabled()||(this.deviceMotion.enable(),this._isEnabled=!0,ya.addEventListener("orientationchange",this._onScreenOrientationChange))},n.disable=function(){this.isEnabled()&&(this.deviceMotion.disable(),this._isEnabled=!1,ya.removeEventListener("orientationchange",this._onScreenOrientationChange))},n.isEnabled=function(){return this._isEnabled},n.destroy=function(){this.disable(),this.deviceMotion=null},n._triggerChange=function(){var t=this.getOrientation();t&&(this._prevOrientation?s.equals(this._prevOrientation,t)||this.trigger("change",{quaternion:t}):this._prevOrientation=t)},n.getOrientation=function(){var t,e=this;if(this.deviceMotion.isWithoutDeviceMotion&&this._deviceOrientationQ){this.deviceOrientationFixQ=this.deviceOrientationFixQ||(new p.a.Quaternion).setFromAxisAngle(new p.a.Vector3(0,1,0),-e._alpha),t=this._deviceOrientationQ;var n=new p.a.Quaternion;n.copy(t),n.multiply(this.filterToWorldQ),n.multiply(this.resetQ),n.multiply(this.worldToScreenQ),n.multiplyQuaternions(this.deviceOrientationFixQ,n);var i=s.fromValues(n.x,n.y,n.z,n.w);return s.normalize(i,i)}if(!(t=this.filter.getOrientation()))return null;var r=this._convertFusionToPredicted(t),o=s.fromValues(r.x,r.y,r.z,r.w);return s.normalize(o,o)},n._convertFusionToPredicted=function(t){this.predictedQ=this.posePredictor.getPrediction(t,this.gyroscope,this.previousTimestampS);var e=new p.a.Quaternion;return e.copy(this.filterToWorldQ),e.multiply(this.resetQ),e.multiply(this.predictedQ),e.multiply(this.worldToScreenQ),e},n._onDeviceMotionChange=function(t){var e=t.inputEvent,n=e.deviceorientation,i=e,r=i.accelerationIncludingGravity,o=i.adjustedRotationRate||i.rotationRate,a=i.timeStamp/1e3;n?(this._alpha||(this._alpha=n.alpha),this._deviceOrientationQ=this._deviceOrientationQ||new p.a.Quaternion,this._deviceOrientationQ.setFromEulerYXZ(n.beta,n.alpha,n.gamma),this._triggerChange()):(this.isFirefoxAndroid&&(a/=1e3),this.accelerometer.set(-r.x,-r.y,-r.z),this.gyroscope.set(o.alpha,o.beta,o.gamma),(this.isIOS||this.isFirefoxAndroid||this.isChromeUsingDegrees)&&this.gyroscope.multiplyScalar(Math.PI/180),this.filter.addAccelMeasurement(this.accelerometer,a),this.filter.addGyroMeasurement(this.gyroscope,a),this._triggerChange(),this.previousTimestampS=a)},n._onScreenOrientationChange=function(t){this._setScreenTransform(ya.orientation)},n._setScreenTransform=function(){this.worldToScreenQ.set(0,0,0,1);var t=ya.orientation;switch(t){case 0:break;case 90:case-90:case 180:this.worldToScreenQ.setFromAxisAngle(new p.a.Vector3(0,0,1),t/-180*Math.PI)}this.inverseWorldToScreenQ.copy(this.worldToScreenQ),this.inverseWorldToScreenQ.inverse()},e}(bo);function Ba(t,e){return Ca.getRotationDelta(t,e,Da.PITCH_DELTA)}var Ga=function(t){function e(e,n){var i;return(i=t.call(this)||this).element=e,i._prevQuaternion=null,i._quaternion=null,i.fusionPoseSensor=null,i.options=ma({scale:1,threshold:0},n),i._onPoseChange=i._onPoseChange.bind(_a(i)),i}ga(e,t);var n=e.prototype;return n.mapAxes=function(t){this.axes=t},n.connect=function(t){return this.observer||(this.observer=t,this.fusionPoseSensor=new qa,this.fusionPoseSensor.enable(),this._attachEvent()),this},n.disconnect=function(){return this.observer?(this._dettachEvent(),this.fusionPoseSensor.disable(),this.fusionPoseSensor.destroy(),this.fusionPoseSensor=null,this.observer=null,this):this},n.destroy=function(){this.disconnect(),this.element=null,this.options=null,this.axes=null,this._prevQuaternion=null,this._quaternion=null},n._onPoseChange=function(t){if(!this._prevQuaternion)return this._prevQuaternion=s.clone(t.quaternion),void(this._quaternion=s.clone(t.quaternion));var e,n,i,r;s.copy(this._prevQuaternion,this._quaternion),s.copy(this._quaternion,t.quaternion),this.observer.change(this,t,(e=this.axes,[(n=this._prevQuaternion,i=this._quaternion,r=Ca.getRotationDelta(n,i,Da.YAW_DELTA_BY_YAW),Ca.getRotationDelta(n,i,Da.YAW_DELTA_BY_ROLL)*Math.sin(Ca.extractPitchFromQuat(i))+r),Ba(this._prevQuaternion,this._quaternion)].reduce((function(t,n,i){return e[i]&&(t[e[i]]=n),t}),{})))},n._attachEvent=function(){this.fusionPoseSensor.on("change",this._onPoseChange)},n._dettachEvent=function(){this.fusionPoseSensor.off("change",this._onPoseChange)},e}(bo),Ha=null,ja=0,Ka=function(){function t(){if(ja++,Ha)return Ha;Ha=this,this._onDeviceOrientation=this._onDeviceOrientation.bind(this),this._onOrientationChange=this._onOrientationChange.bind(this),this._spinR=0,this._screenOrientationAngle=0,ya.addEventListener("deviceorientation",this._onDeviceOrientation),ya.addEventListener("orientationchange",this._onOrientationChange)}var e=t.prototype;return e._onDeviceOrientation=function(t){if(null!==t.beta&&null!==t.gamma){var e=i.toRadian(t.beta),n=i.toRadian(t.gamma);this._spinR=Math.atan2(Math.cos(e)*Math.sin(n),Math.sin(e))}},e._onOrientationChange=function(t){ya.screen&&ya.screen.orientation&&void 0!==ya.screen.orientation.angle?this._screenOrientationAngle=screen.orientation.angle:void 0!==ya.orientation&&(this._screenOrientationAngle=ya.orientation>=0?ya.orientation:360+ya.orientation)},e.getRadian=function(){return this._spinR+i.toRadian(this._screenOrientationAngle)},e.unref=function(){--ja>0||(ya.removeEventListener("deviceorientation",this._onDeviceOrientation),ya.removeEventListener("orientationchange",this._onOrientationChange),this._spinR=0,this._screenOrientationAngle=0,Ha=null,ja=0)},t}(),Za=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this)._useRotation=!1,i._screenRotationAngle=null,i.setUseRotation(!(!n||!n.useRotation)),i._userDirection=da.DIRECTION_ALL,i}ga(e,t);var n=e.prototype;return n.setUseRotation=function(t){this._useRotation=t,this._screenRotationAngle&&(this._screenRotationAngle.unref(),this._screenRotationAngle=null),this._useRotation&&(this._screenRotationAngle=new Ka)},n.connect=function(e){this._userDirection=this._direction,this._useRotation&&this._direction&da.DIRECTION_ALL&&(this._direction=da.DIRECTION_HORIZONTAL),t.prototype.connect.call(this,e)},n.getOffset=function(e,n){if(!1===this._useRotation)return t.prototype.getOffset.call(this,e,n);var i=t.prototype.getOffset.call(this,e,[!0,!0]),r=[0,0],o=this._screenRotationAngle.getRadian(),a=Math.cos(o),s=Math.sin(o);return r[0]=i[0]*a-i[1]*s,r[1]=i[1]*a+i[0]*s,this._userDirection&da.DIRECTION_HORIZONTAL?this._userDirection&da.DIRECTION_VERTICAL||(r[1]=0):r[0]=0,r},n.destroy=function(){this._useRotation&&this._screenRotationAngle&&this._screenRotationAngle.unref(),t.prototype.destroy.call(this)},e}(ha),Ja=a.fromValues(0,1,0),$a=function(t){function e(){var e;return(e=t.call(this)||this)._fusionPoseSensor=new qa,e._quaternion=s.create(),e._fusionPoseSensor.enable(),e._fusionPoseSensor.on("change",(function(t){e._quaternion=t.quaternion,e.trigger("change",{isTrusted:!0})})),e}ga(e,t);var n=e.prototype;return n.getCombinedQuaternion=function(t){var e=s.setAxisAngle(s.create(),Ja,i.toRadian(-t)),n=s.conjugate(s.create(),this._quaternion);return s.multiply(s.create(),n,e)},n.destroy=function(){this.off(),this._fusionPoseSensor&&(this._fusionPoseSensor.off(),this._fusionPoseSensor.destroy(),this._fusionPoseSensor=null)},e}(bo),ts=[-180,180],es=[-90,90],ns=[-180,180],is=function(){var t=function(t){function e(e){var n;n=t.call(this)||this;var i=ma({element:null,yaw:0,pitch:0,fov:65,showPolePoint:!1,useZoom:!0,useKeyboard:!0,gyroMode:Ya.YAWPITCH,touchDirection:6,yawRange:ts,pitchRange:es,fovRange:[30,110],aspectRatio:1},e);return n._element=i.element,n._initialFov=i.fov,n._enabled=!1,n._isAnimating=!1,n._deviceQuaternion=null,n._initAxes(i),n.option(i),n}ga(e,t);var n=e.prototype;return n._initAxes=function(t){var n=this,i=this._updateYawRange(t.yawRange,t.fov,t.aspectRatio),r=this._updatePitchRange(t.pitchRange,t.fov,t.showPolePoint),o=t.gyroMode===Ya.VR;this.axesPanInput=new Za(this._element,{useRotation:o}),this.axesWheelInput=new la(this._element,{scale:-4}),this.axesTiltMotionInput=null,this.axesPinchInput=Ra?new ca(this._element,{scale:-1}):null,this.axesMoveKeyInput=new fa(this._element,{scale:[-6,6]}),this.axes=new da({yaw:{range:i,circular:e.isCircular(i),bounce:[0,0]},pitch:{range:r,circular:e.isCircular(r),bounce:[0,0]},fov:{range:t.fovRange,circular:[!1,!1],bounce:[0,0]}},{deceleration:.0014,maximumDuration:1e3},{yaw:t.yaw,pitch:t.pitch,fov:t.fov}).on({hold:function(t){n.axes.options.maximumDuration=1e3,n.trigger("hold",{isTrusted:t.isTrusted})},change:function(t){0!==t.delta.fov&&(n._updateControlScale(t),n.updatePanScale()),n._triggerChange(t)},release:function(t){n._triggerChange(t)},animationStart:function(t){},animationEnd:function(t){n.trigger("animationEnd",{isTrusted:t.isTrusted})}})},n.updatePanScale=function(t){void 0===t&&(t={});var e=this.axes.get().fov,n=t.height||parseInt(Ma(this._element).height,10),i=ka[0]*e/this._initialFov*320/n;return this.axesPanInput.options.scale=[i,i],this.axes.options.deceleration=.0014*e/110,this},n.option=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var i=e.length;if(0===i)return this._getOptions();if(1===i&&"string"==typeof e[0])return this._getOptions(e[0]);var r=ma({},this.options),o={},a=[];return 1===i?(a=Object.keys(e[0]),o=ma({},e[0])):i>=2&&(a.push(e[0]),o[e[0]]=e[1]),this._setOptions(this._getValidatedOptions(o)),this._applyOptions(a,r),this},n._getValidatedOptions=function(t){return t.yawRange&&(t.yawRange=this._getValidYawRange(t.yawRange,t.fov,t.aspectRatio)),t.pitchRange&&(t.pitchRange=this._getValidPitchRange(t.pitchRange,t.fov)),t},n._getOptions=function(t){var e;return"string"==typeof t?e=this.options[t]:0===arguments.length&&(e=this.options),e},n._setOptions=function(t){for(var e in t)this.options[e]=t[e]},n._applyOptions=function(t,e){var n=this.options,i=this.axes,r=n.gyroMode===Ya.VR,o=n.gyroMode===Ya.YAWPITCH,a=r?2&n.touchDirection:n.touchDirection;if(t.some((function(t){return"showPolePoint"===t||"fov"===t||"aspectRatio"===t||"yawRange"===t||"pitchRange"===t}))&&(t.indexOf("fov")>=0&&(i.setTo({fov:n.fov}),this.updatePanScale()),this._updateControlScale()),t.some((function(t){return"fovRange"===t}))){var s=n.fovRange,h=i.get().fov,c=i.get().fov;u.copy(i.axis.fov.range,s),c<s[0]?c=s[0]:h>s[1]&&(c=s[1]),h!==c&&(i.setTo({fov:c},0),this._updateControlScale(),this.updatePanScale())}(t.some((function(t){return"gyroMode"===t}))&&Pa&&(this.axesTiltMotionInput&&(this.axes.disconnect(this.axesTiltMotionInput),this.axesTiltMotionInput.destroy(),this.axesTiltMotionInput=null),this._deviceQuaternion&&(this._deviceQuaternion.destroy(),this._deviceQuaternion=null),r?this._initDeviceQuaternion():o&&(this.axesTiltMotionInput=new Ga(this._element),this.axes.connect(["yaw","pitch"],this.axesTiltMotionInput)),this.axesPanInput.setUseRotation(r)),t.some((function(t){return"useKeyboard"===t})))&&(n.useKeyboard?i.connect(["yaw","pitch"],this.axesMoveKeyInput):i.disconnect(this.axesMoveKeyInput));if(t.some((function(t){return"useZoom"===t}))){var l=n.useZoom;i.disconnect(this.axesWheelInput),l&&i.connect(["fov"],this.axesWheelInput)}this._togglePinchInputByOption(n.touchDirection,n.useZoom),t.some((function(t){return"touchDirection"===t}))&&this._enabled&&this._enableTouch(a)},n._togglePinchInputByOption=function(t,e){this.axesPinchInput&&(this.axes.disconnect(this.axesPinchInput),e&&6===t&&-1===this.axes._inputs.indexOf(this.axesPinchInput)&&this.axes.connect(["fov"],this.axesPinchInput))},n._enableTouch=function(t){this.axesPanInput&&this.axes.disconnect(this.axesPanInput);var e=2&t?"yaw":null,n=4&t?"pitch":null;this.axes.connect([e,n],this.axesPanInput)},n._initDeviceQuaternion=function(){var t=this;this._deviceQuaternion=new $a,this._deviceQuaternion.on("change",(function(e){t._triggerChange(e)}))},n._getValidYawRange=function(t,n,i){var r=e.adjustAspectRatio(i||this.options.aspectRatio||1),o=(n||this.axes.get().fov)*r;return t[1]-t[0]>=o?t:this.options.yawRange||ts},n._getValidPitchRange=function(t,e){var n=e||this.axes.get().fov;return t[1]-t[0]>=n?t:this.options.pitchRange||es},e.isCircular=function(t){return t[1]-t[0]<360?[!1,!1]:[!0,!0]},n._updateControlScale=function(t){var n=this.options,i=this.axes.get().fov,r=this._updatePitchRange(n.pitchRange,i,n.showPolePoint),o=this._updateYawRange(n.yawRange,i,n.aspectRatio),a=this.axes.get(),s=a.yaw,h=a.pitch;return u.copy(this.axes.axis.yaw.range,o),u.copy(this.axes.axis.pitch.range,r),this.axes.axis.yaw.circular=e.isCircular(o),this.axes.axis.pitch.circular=e.isCircular(r),s<o[0]?s=o[0]:s>o[1]&&(s=o[1]),h<r[0]?h=r[0]:h>r[1]&&(h=r[1]),t&&t.set({yaw:s,pitch:h}),this.axes.setTo({yaw:s,pitch:h},0),this},n._updatePitchRange=function(t,e,n){if(this.options.gyroMode===Ya.VR)return ns;var i=t[1]-t[0],r=e/2;return n&&!(i<180)?t.concat():[t[0]+r,t[1]-r]},n._updateYawRange=function(t,e,n){if(this.options.gyroMode===Ya.VR)return ts;if(t[1]-t[0]>=360)return t.concat();var r=Ca.toDegree(Math.atan2(n,1/Math.tan(i.toRadian(e/2))));return[t[0]+r,t[1]-r]},n._triggerChange=function(t){var e=this.axes.get(),n=this.options,i={targetElement:n.element,isTrusted:t.isTrusted};i.yaw=e.yaw,i.pitch=e.pitch,i.fov=e.fov,n.gyroMode===Ya.VR&&this._deviceQuaternion&&(i.quaternion=this._deviceQuaternion.getCombinedQuaternion(e.yaw)),this.trigger("change",i)},e.adjustAspectRatio=function(t){for(var n=[.52,.54,.563,.57,.584,.59,.609,.67,.702,.72,.76,.78,.82,.92,.97,1,1.07,1.14,1.19,1.25,1.32,1.38,1.4,1.43,1.53,1.62,1.76,1.77,1.86,1.96,2.26,2.3,2.6,3,5,6],i=[.51,.54,.606,.56,.628,.63,.647,.71,.736,.757,.78,.77,.8,.89,.975,1,1.07,1.1,1.15,1.18,1.22,1.27,1.3,1.33,1.39,1.45,1.54,1.55,1.58,1.62,1.72,1.82,1.92,2,2.24,2.3],r=-1,o=0;o<n.length-1;o++)if(n[o]<=t&&n[o+1]>=t){r=o;break}if(-1===r)return n[0]>t?i[0]:i[i[0].length-1];var a=n[r],s=n[r+1],u=i[r],h=i[r+1];return e.lerp(u,h,(t-a)/(s-a))},e.lerp=function(t,e,n){return t+n*(e-t)},n.enable=function(){return this._enabled||(this._enabled=!0,this._applyOptions(Object.keys(this.options),this.options),this.updatePanScale()),this},n.disable=function(t){return this._enabled?(t||this._resetOrientation(),this.axes.disconnect(),this._enabled=!1,this):this},n._resetOrientation=function(){var t=this.options;return this.axes.setTo({yaw:t.yaw,pitch:t.pitch,fov:t.fov},0),this},n.lookAt=function(t,e){var n=t.yaw,i=t.pitch,r=t.fov,o=this.axes.get(),a=void 0===n?0:n-o.yaw,s=void 0===i?0:i-o.pitch,u=void 0===r?0:r-o.fov;this.axes.options.maximumDuration=1/0,this.axes.setBy({yaw:a,pitch:s,fov:u},e)},n.getYawPitch=function(){var t=this.axes.get();return{yaw:t.yaw,pitch:t.pitch}},n.getFov=function(){return this.axes.get().fov},n.getQuaternion=function(){var t=this.axes.get();return this._deviceQuaternion.getCombinedQuaternion(t.yaw)},n.shouldRenderWithQuaternion=function(){return this.options.gyroMode===Ya.VR},n.destroy=function(){this.axes&&this.axes.destroy(),this.axisPanInput&&this.axisPanInput.destroy(),this.axesWheelInput&&this.axesWheelInput.destroy(),this.axesTiltMotionInput&&this.axesTiltMotionInput.destroy(),this.axesDeviceOrientationInput&&this.axesDeviceOrientationInput.destroy(),this.axesPinchInput&&this.axesPinchInput.destroy(),this.axesMoveKeyInput&&this.axesMoveKeyInput.destroy(),this._deviceQuaternion&&this._deviceQuaternion.destroy()},e}(bo);return t.VERSION="3.3.1",t.CONTROL_MODE_VR=1,t.CONTROL_MODE_YAWPITCH=2,t.TOUCH_DIRECTION_ALL=6,t.TOUCH_DIRECTION_YAW=2,t.TOUCH_DIRECTION_PITCH=4,t.TOUCH_DIRECTION_NONE=1,t}(),rs="undefined"==typeof Promise?U.a.Promise:Promise,os={NONE:0,LOADING:1,LOADED:2,ERROR:3},as="readystatechange",ss=function(){var t=function(t){function e(e){var n;return(n=t.call(this)||this)._image=null,n._onceHandlers=[],n._loadStatus=os.NONE,e&&n.set(e),n}ga(e,t);var n=e.prototype;return n.get=function(){var t=this;return new rs((function(n,i){t._image?t._loadStatus===os.LOADED?n(t.getElement()):t._loadStatus===os.LOADING?e.isMaybeLoaded(t._image)?(t._loadStatus=os.LOADED,n(t.getElement())):t.on(as,(function(e){e.type===os.LOADED?n(t.getElement()):i("ImageLoader: failed to load images.")})):i("ImageLoader: failed to load images"):i("ImageLoader: image is not defiend")}))},n.set=function(t){var n=this;this._loadStatus=os.LOADING,this._image=e.createElement(t),e.isMaybeLoaded(this._image)?this._loadStatus=os.LOADED:this.onceLoaded(this._image,(function(){n._loadStatus=os.LOADED,n.trigger(as,{type:os.LOADED})}),(function(){n._loadStatus=os.ERROR,n.trigger(as,{type:os.ERROR})}))},e.createElement=function(t){return(t instanceof Array?t:[t]).map((function(t){var e=t;return"string"==typeof t&&((e=new Image).crossOrigin="anonymous",e.src=t),e}))},n.getElement=function(){return 1===this._image.length?this._image[0]:this._image},e.isMaybeLoaded=function(t){var e=!1;return t instanceof Image?e=t.complete&&0!==t.naturalWidth:t instanceof Array&&(e=!t.some((function(t){return!t.complete||0===t.naturalWidth}))),e},n.onceLoaded=function(t,n,i){var r=this,o=t instanceof Array?t:[t],a=o.filter((function(t){return!e.isMaybeLoaded(t)})).map((function(t){return new rs((function(e,n){r._once(t,"load",(function(){return e(t)})),r._once(t,"error",(function(){return n(t)}))}))}));rs.all(a).then((function(t){return n(1===o.length?o[0]:o)}),(function(t){return i(t)}))},n._once=function(t,e,n){var i=function i(r){t.removeEventListener(e,i),n(r)};t.addEventListener(e,i),this._onceHandlers.push({target:t,type:e,fn:i})},n.getStatus=function(){return this._loadStatus},n.destroy=function(){this._onceHandlers.forEach((function(t){t.target.removeEventListener(t.type,t.fn)})),this._onceHandlers=[],this._image.src="",this._image=null,this._loadStatus=os.NONE},e}(bo);return t.STATUS=os,t}(),us="undefined"==typeof Promise?U.a.Promise:Promise,hs=0,cs=1,ls=2,fs=3,ds=4,ps=-1,vs={};vs[cs]="loadedmetadata",vs[ls]="loadeddata",vs[fs]="canplay",vs[ds]="canplaythrough";var ms,gs,_s=function(){function t(t){this._handlers=[],this._sourceCount=0,this._thresholdReadyState=cs,this._thresholdEventName=vs[this._thresholdReadyState],this._loadStatus=t&&t.readyState||hs,this._onerror=this._onerror.bind(this),t&&this.set(t)}var e=t.prototype;return e._onerror=function(){this._errorCount++,this._errorCount>=this._sourceCount&&(this._loadStatus=ps,this._detachErrorHandler(this._onerror))},e._appendSourceElement=function(t){var e,n;if("object"==typeof t?(e=t.src,n=t.type):"string"==typeof t&&(e=t),!e)return!1;var i=document.createElement("source");return i.src=e,n&&(i.type=n),this._video.appendChild(i),!0},e.set=function(t){var e=this;this._reset(),t&&(t instanceof HTMLVideoElement?this._video=t:"string"!=typeof t&&"object"!=typeof t||(this._video=document.createElement("video"),this._video.setAttribute("crossorigin","anonymous"),this._video.setAttribute("webkit-playsinline",""),this._video.setAttribute("playsinline",""),t instanceof Array?t.forEach((function(t){return e._appendSourceElement(t)})):this._appendSourceElement(t),this._sourceCount=this._video.querySelectorAll("source").length,this._sourceCount>0?this._video.readyState<this._thresholdReadyState&&(this._video.load(),this._attachErrorHandler(this._onerror)):this._video=null))},e._attachErrorHandler=function(t){this._video.addEventListener("error",t),this._sources=this._video.querySelectorAll("source"),[].forEach.call(this._sources,(function(e){e.addEventListener("error",t)}))},e._detachErrorHandler=function(t){this._video.removeEventListener("error",t),[].forEach.call(this._sources,(function(e){e.removeEventListener("error",t)}))},e.get=function(){var t=this;return new us((function(e,n){if(t._video)if(t._loadStatus===ps)n("VideoLoader: video source is invalid");else if(t._video.readyState>=t._thresholdReadyState)e(t._video);else{t._attachErrorHandler((function e(){t._loadStatus===ps&&(t._detachErrorHandler(e),n("VideoLoader: video source is invalid"))})),t._once(t._thresholdEventName,(function(){return e(t._video)}))}else n("VideoLoader: video is undefined")}))},e.getElement=function(){return this._video},e.destroy=function(){this._reset()},e._reset=function(){var t=this;this._handlers.forEach((function(e){t._video.removeEventListener(e.type,e.fn)})),this._handlers=[],this._video=null,this._sourceCount=0,this._errorCount=0},e._once=function(t,e){var n=this._video,i=function i(r){n.removeEventListener(t,i),e(r)};n.addEventListener(t,i,!0),this._handlers.push({type:t,fn:i})},t}(),ys={0:"NO_ERROR",1280:"INVALID_ENUM",1281:"INVALID_VALUE",1282:"INVALID_OPERATION",1285:"OUT_OF_MEMORY",1286:"INVALID_FRAMEBUFFER_OPERATION",37442:"CONTEXT_LOST_WEBGL"},xs=null,ws=function(){function t(){}return t.createShader=function(t,e,n){var i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS)?i:(console.error(t.getShaderInfoLog(i)),null)},t.createProgram=function(t,e,n){var i=t.createProgram();return t.attachShader(i,e),t.attachShader(i,n),t.linkProgram(i),t.detachShader(i,e),t.detachShader(i,n),t.deleteShader(e),t.deleteShader(n),t.getProgramParameter(i,t.LINK_STATUS)?i:(t.deleteProgram(i),null)},t.initBuffer=function(t,e,n,i,r){var o=t.createBuffer();return t.bindBuffer(e,o),t.bufferData(e,n,t.STATIC_DRAW),o&&(o.itemSize=i,o.numItems=n.length/i),void 0!==r&&(t.enableVertexAttribArray(r),t.vertexAttribPointer(r,o.itemSize,t.FLOAT,!1,0,0)),o},t.getWebglContext=function(t,e){var n=["webgl","experimental-webgl","webkit-3d","moz-webgl"],i=null,r=ma({preserveDrawingBuffer:!1,antialias:!1,xrCompatible:!0},e);function o(t){return t.statusMessage}t.addEventListener("webglcontextcreationerror",o);for(var a=0;a<n.length;a++){try{i=t.getContext(n[a],r)}catch(t){}if(i)break}return t.removeEventListener("webglcontextcreationerror",o),i},t.createTexture=function(t,e){var n=t.createTexture();return t.bindTexture(e,n),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(e,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(e,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.bindTexture(e,null),n},t.isWebGLAvailable=function(){if(null===xs){var e=document.createElement("canvas"),n=t.getWebglContext(e);if(xs=!!n,n){var i=n.getExtension("WEBGL_lose_context");i&&i.loseContext()}}return xs},t.isStableWebGL=function(){var t=V(),e=!0;return("android"===t.os.name&&parseFloat(t.os.version)<=4.3||"android"===t.os.name&&4.4===parseFloat(t.os.version)&&"chrome"!==t.browser.name)&&(e=!1),e},t.getErrorNameFromWebGLErrorCode=function(t){return t in ys?ys[t]:"UNKNOWN_ERROR"},t.texImage2D=function(t,e,n){try{t.texImage2D(e,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)}catch(t){console.error("WebGLUtils.texImage2D error:",t)}},t.getMaxTextureSize=function(t){return t.getParameter(t.MAX_TEXTURE_SIZE)},t}(),Es=V(),Ts="ie"===Es.browser.name&&"11.0"===Es.browser.version,Ms={ERROR:"error"},bs=function(){var t=function(t){function e(){var e;return(e=t.call(this)||this)._forceDimension=null,e._pixelCanvas=null,e._pixelContext=null,e}ga(e,t);var n=e.prototype;return n.render=function(t){var e=t.gl,n=t.shaderProgram,i=t.indexBuffer,r=t.mvMatrix,o=t.pMatrix;e.uniformMatrix4fv(n.pMatrixUniform,!1,o),e.uniformMatrix4fv(n.mvMatrixUniform,!1,r),i&&e.drawElements(e.TRIANGLES,i.numItems,e.UNSIGNED_SHORT,0)},n.getDimension=function(t){return{width:t.naturalWidth||t.videoWidth,height:t.naturalHeight||t.videoHeight}},n.updateShaderData=function(t){},n._initPixelSource=function(t,e){if(Ts&&t instanceof HTMLVideoElement||e){var n=e||this.getDimension(t),i=n.width,r=n.height;this._pixelCanvas=document.createElement("canvas"),this._pixelCanvas.width=i,this._pixelCanvas.height=r,this._pixelContext=this._pixelCanvas.getContext("2d")}this._forceDimension=e},n._getPixelSource=function(t){if(!this._pixelCanvas)return t;var e=this.getDimension(t),n=this._forceDimension||e;return this._pixelCanvas.width!==n.width&&(this._pixelCanvas.width=n.width),this._pixelCanvas.height!==n.height&&(this._pixelCanvas.height=n.height),this._forceDimension?this._pixelContext.drawImage(t,0,0,e.width,e.height,0,0,n.width,n.height):this._pixelContext.drawImage(t,0,0),this._pixelCanvas},n._extractTileConfig=function(t){var e=Array.isArray(t.tileConfig)?t.tileConfig:Array.apply(void 0,Array(6)).map((function(){return t.tileConfig}));return e=e.map((function(t){return ma({flipHorizontal:!1,rotation:0},t)}))},n._triggerError=function(t){console.error("Renderer Error:",t),this.trigger(Ms.ERROR,{message:"string"==typeof t?t:t.message})},e}(bo);return t.EVENTS=Ms,t}(),Rs=function(){var t=function(t){function e(){return t.apply(this,arguments)||this}ga(e,t);var n=e.prototype;return n.getVertexPositionData=function(){return e._VERTEX_POSITION_DATA=null!==e._VERTEX_POSITION_DATA?e._VERTEX_POSITION_DATA:[1,-1,1,-1,-1,1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,1,1,-1,-1,1,-1,1,1,1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1],e._VERTEX_POSITION_DATA},n.getIndexData=function(){if(e._INDEX_DATA)return e._INDEX_DATA;for(var t=[],n=this.getVertexPositionData(),i=0;i<n.length/3;i+=4)t.push(i,i+2,i+1,i,i+3,i+2);return e._INDEX_DATA=t,t},e.extractOrder=function(t){return t.order||"RLUDBF"},n.getTextureCoordData=function(t){var n=e.extractOrder(t),i=this.getVertexPositionData(),r=this._extractTileConfig(t);return"BFUDRL".split("").map((function(t){return r[n.indexOf(t)]})).map((function(t,e){for(var n=parseInt(t.rotation/90,10),r=t.flipHorizontal?[0,1,2,3]:[1,0,3,2],o=0;o<Math.abs(n);o++)t.flipHorizontal&&n>0||!t.flipHorizontal&&n<0?r.push(r.shift()):r.unshift(r.pop());for(var a=i.slice(12*e,12*e+12),s=[],u=0;u<4;u++)s[r[u]]=a.splice(0,3);return s})).join().split(",").map((function(t){return parseInt(t,10)}))},n.getVertexShaderSource=function(){return"\nattribute vec3 aVertexPosition;\nattribute vec3 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nvarying highp vec3 vVertexDirectionVector;\nvoid main(void) {\n\tvVertexDirectionVector = aTextureCoord;\n\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n}"},n.getFragmentShaderSource=function(){return"\nprecision highp float;\nuniform samplerCube uSampler;\nvarying highp vec3 vVertexDirectionVector;\nvoid main(void) {\n\tgl_FragColor = textureCube(uSampler, vVertexDirectionVector);\n}"},n.updateTexture=function(t,n,i){var r=e.extractOrder(i),o={};r.split("").forEach((function(t,e){o[t]=e}));try{if(n instanceof Array)for(var a=0;a<6;a++){var s=o["RLUDBF"[a]];ws.texImage2D(t,t.TEXTURE_CUBE_MAP_POSITIVE_X+a,n[s])}else for(var u=this.getMaxCubeMapTextureSize(t,n),h=0;h<6;h++){var c=o["RLUDBF"[h]],l=this.extractTileFromImage(n,c,u);ws.texImage2D(t,t.TEXTURE_CUBE_MAP_POSITIVE_X+h,l)}}catch(t){this._triggerError(t)}},n.bindTexture=function(t,e,n,i){t.bindTexture(t.TEXTURE_CUBE_MAP,e),this.updateTexture(t,n,i)},n.getSourceTileSize=function(t){var e=this.getDimension(t),n=e.width,i=e.height,r=n/i;return r===1/6?n:6===r?i:r===2/3?n/2:n/3},n.extractTileFromImage=function(t,e,n){var i=this.getDimension(t).width,r=this.getSourceTileSize(t),o=document.createElement("canvas");o.width=n,o.height=n;var a=o.getContext("2d"),s=i/r,u=r*e%(r*s),h=parseInt(e/s,10)*r;return a.drawImage(t,u,h,r,r,0,0,n,n),o},n.getMaxCubeMapTextureSize=function(t,e){var n=V(),i=t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),r=this.getSourceTileSize(e);if("ie"===n.browser.name&&11===parseInt(n.browser.version,10)&&!Ca.isPowerOfTwo(r))for(var o=1;o<i;o*=2)if(!(o<r)){r=o;break}return"ios"===n.os.name&&9===parseInt(n.os.version,10)&&(r=1024),"ios"===n.os.name&&8===parseInt(n.os.version,10)&&(r=512),Math.min(i,r)},e}(bs);return t._VERTEX_POSITION_DATA=null,t._INDEX_DATA=null,t}(),Ps=function(t){function e(){return t.apply(this,arguments)||this}ga(e,t);var n=e.prototype;return n.getVertexShaderSource=function(){return"\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nvarying highp vec2 vTextureCoord;\nvoid main(void) {\n\tvTextureCoord = aTextureCoord;\n\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n}"},n.getFragmentShaderSource=function(){return"\n#define PI 3.14159265359\nprecision highp float;\nvarying highp vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform bool uIsEAC;\nconst vec2 OPERATE_COORDS_RANGE = vec2(-1.0, 1.0);\nconst vec2 TEXTURE_COORDS_RANGE = vec2(0.0, 1.0);\n// vector type is used for initializing values instead of array.\nconst vec4 TEXTURE_DIVISION_X = vec4(0.0, 1.0 / 3.0, 2.0 / 3.0, 1.0);\nconst vec3 TEXTURE_DIVISION_Y = vec3(0.0, 1.0 / 2.0, 1.0);\nconst float EAC_CONST = 2.0 / PI;\nfloat scale(vec2 domainRange, vec2 targetRange, float val) {\n\tfloat unit = 1.0 / (domainRange[1] - domainRange[0]);\n\treturn targetRange[0] + (targetRange[1] - targetRange[0]) * (val - domainRange[0]) * unit;\n}\nvoid main(void) {\n\tfloat transformedCoordX;\n\tfloat transformedCoordY;\n\n\tif (uIsEAC) {\n\t\tvec2 orgTextureRangeX;\n\t\tvec2 orgTextureRangeY;\n\n\t\t// Apply EAC transform\n\t\tif (vTextureCoord.s >= TEXTURE_DIVISION_X[2]) {\n\t\t\torgTextureRangeX = vec2(TEXTURE_DIVISION_X[2], TEXTURE_DIVISION_X[3]);\n\t\t} else if (vTextureCoord.s >= TEXTURE_DIVISION_X[1]) {\n\t\t\torgTextureRangeX = vec2(TEXTURE_DIVISION_X[1], TEXTURE_DIVISION_X[2]);\n\t\t} else {\n\t\t\torgTextureRangeX = vec2(TEXTURE_DIVISION_X[0], TEXTURE_DIVISION_X[1]);\n\t\t}\n\n\t\tif (vTextureCoord.t >= TEXTURE_DIVISION_Y[1]) {\n\t\t\torgTextureRangeY = vec2(TEXTURE_DIVISION_Y[1], TEXTURE_DIVISION_Y[2]);\n\t\t} else {\n\t\t\torgTextureRangeY = vec2(TEXTURE_DIVISION_Y[0], TEXTURE_DIVISION_Y[1]);\n\t\t}\n\n\t\t// scaling coors by the coordinates following the range from -1.0 to 1.0.\n\t\tfloat px = scale(orgTextureRangeX, OPERATE_COORDS_RANGE, vTextureCoord.s);\n\t\tfloat py = scale(orgTextureRangeY, OPERATE_COORDS_RANGE, vTextureCoord.t);\n\n\t\tfloat qu = EAC_CONST * atan(px) + 0.5;\n\t\tfloat qv = EAC_CONST * atan(py) + 0.5;\n\n\t\t// re-scaling coors by original coordinates ranges\n\t\ttransformedCoordX = scale(TEXTURE_COORDS_RANGE, orgTextureRangeX, qu);\n\t\ttransformedCoordY = scale(TEXTURE_COORDS_RANGE, orgTextureRangeY, qv);\n\t} else {\n\t\t// normal cubemap\n\t\ttransformedCoordX = vTextureCoord.s;\n\t\ttransformedCoordY = vTextureCoord.t;\n\t}\n\n\tgl_FragColor = texture2D(uSampler, vec2(transformedCoordX, transformedCoordY));\n}"},n.getVertexPositionData=function(){return this._vertices||(this._vertices=[1,-1,1,-1,-1,1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1]),this._vertices},n.getIndexData=function(){var t=this;return function(){for(var e=[],n=0;n<t._vertices.length/3;n+=4)e.push(n,n+1,n+2,n,n+2,n+3);return e}()},n.getTextureCoordData=function(t){for(var e=this,n=t.order||"RLUDFB",i=[],r=1;r>=0;r--)for(var o=0;o<3;o++){var a=[o/3,r/2,(o+1)/3,r/2,(o+1)/3,(r+1)/2,o/3,(r+1)/2];i.push(a)}var s=this._extractTileConfig(t);return i=i.map((function(t){return e._shrinkCoord(t)})).map((function(t,n){return e._transformCoord(t,s[n])})),"BFUDRL".split("").map((function(t){return n.indexOf(t)})).map((function(t){return i[t]})).reduce((function(t,e){return t.concat(e)}),[])},n.updateTexture=function(t,e){ws.texImage2D(t,t.TEXTURE_2D,this._getPixelSource(e))},n.bindTexture=function(t,e,n){var i=this.getDimension(n),r=i.width,o=i.height,a=Math.max(r,o),s=ws.getMaxTextureSize(t);a>s?this._triggerError("Image width("+r+") exceeds device limit("+s+"))"):(this._initPixelSource(n),t.activeTexture(t.TEXTURE0),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.bindTexture(t.TEXTURE_2D,e),this.updateTexture(t,n))},n._transformCoord=function(t,e){var n=t.slice();return e.flipHorizontal&&(n=this._flipHorizontalCoord(n)),e.rotation&&(n=this._rotateCoord(n,e.rotation)),n},n._shrinkCoord=function(t){return[t[0]+0,t[1]+0,t[2]-0,t[3]+0,t[4]-0,t[5]-0,t[6]+0,t[7]-0]},n._rotateCoord=function(t,e){var n,i=parseInt(e/90,10)%4;if(0===i)return t;var r=[];return i>0?(n=t.splice(0,2*i),r=t.concat(n)):r=(n=t.splice(2*(4+i),2*-i)).concat(t),r},n._flipHorizontalCoord=function(t){return[t[2],t[3],t[0],t[1],t[6],t[7],t[4],t[5]]},e}(bs),As={INVALID_DEVICE:10,NO_WEBGL:11,FAIL_IMAGE_LOAD:12,FAIL_BIND_TEXTURE:13,INVALID_RESOURCE:14,RENDERING_CONTEXT_LOST:15},Is={READY:"ready",VIEW_CHANGE:"viewChange",ANIMATION_END:"animationEnd",ERROR:"error"},Os={EQUIRECTANGULAR:"equirectangular",CUBEMAP:"cubemap",CUBESTRIP:"cubestrip",PANORAMA:"panorama",STEREOSCOPIC_EQUI:"stereoequi"},Ss={TOP_BOTTOM:"3dv",LEFT_RIGHT:"3dh",NONE:""},Cs=-.5*Math.PI,Ds=[],Ls=[],Fs=[];for(ms=0;ms<=60;ms++){var Vs=(ms/60-.5)*Math.PI,Ns=Math.sin(Vs),Us=Math.cos(Vs);for(gs=0;gs<=60;gs++){var zs=2*(gs/60-.5)*Math.PI+Cs,Qs=Math.sin(zs),Ws=Math.cos(zs)*Us,ks=Ns,Ys=Qs*Us,Xs=gs/60,qs=ms/60;if(Ds.push(Xs,qs),Ls.push(2*Ws,2*ks,2*Ys),60!==gs&&60!==ms){var Bs=61*ms+gs,Gs=Bs+60+1;Fs.push(Bs,Gs,Bs+1,Gs,Gs+1,Bs+1)}}}var Hs=function(){var t=function(t){function e(e){var n;return(n=t.call(this)||this)._stereoFormat=e,n}ga(e,t);var n=e.prototype;return n.render=function(e){var n,i,r=e.gl,o=e.shaderProgram;switch(this._stereoFormat){case Ss.TOP_BOTTOM:n=[1,.5,0,0],i=[1,.5,0,.5];break;case Ss.LEFT_RIGHT:n=[.5,1,0,0],i=[.5,1,.5,0];break;default:n=[1,1,0,0],i=[1,1,0,0]}var a=r.getUniformLocation(o,"uTexScaleOffset");r.uniform4fv(a,[].concat(n,i)),t.prototype.render.call(this,e)},n.getVertexPositionData=function(){return e._VERTEX_POSITION_DATA},n.getIndexData=function(){return e._INDEX_DATA},n.getTextureCoordData=function(){return e._TEXTURE_COORD_DATA},n.getVertexShaderSource=function(){return"\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform float uEye;\nuniform vec4 uTexScaleOffset[2];\nvarying highp vec2 vTextureCoord;\nvoid main(void) {\n\tvec4 scaleOffset = uTexScaleOffset[int(uEye)];\n\tvTextureCoord = aTextureCoord.xy * scaleOffset.xy + scaleOffset.zw;\n\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n}"},n.getFragmentShaderSource=function(){return"\nprecision highp float;\nvarying highp vec2 vTextureCoord;\nuniform sampler2D uSampler;\nvoid main(void) {\n\tgl_FragColor = texture2D(uSampler, vTextureCoord.st);\n}"},n.updateTexture=function(t,e){ws.texImage2D(t,t.TEXTURE_2D,this._getPixelSource(e))},n.bindTexture=function(t,e,n){var i=this.getDimension(n),r=i.width,o=i.height,a=Math.max(r,o),s=ws.getMaxTextureSize(t);a>s?this._triggerError("Image width("+r+") exceeds device limit("+s+"))"):(this._initPixelSource(n),t.activeTexture(t.TEXTURE0),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.bindTexture(t.TEXTURE_2D,e),this.updateTexture(t,n))},e}(bs);return t._VERTEX_POSITION_DATA=Ls,t._TEXTURE_COORD_DATA=Ds,t._INDEX_DATA=Fs,t}(),js=[],Ks=[],Zs=[],Js=function(){var t=function(t){function e(){return t.apply(this,arguments)||this}ga(e,t);var n=e.prototype;return n.getVertexPositionData=function(){return e._VERTEX_POSITION_DATA},n.getIndexData=function(){return e._INDEX_DATA},n.getTextureCoordData=function(){return e._TEXTURE_COORD_DATA},n.getVertexShaderSource=function(){return"\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nvarying highp vec2 vTextureCoord;\nvoid main(void) {\n\tvTextureCoord = aTextureCoord;\n\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n}"},n.getFragmentShaderSource=function(){return"\nprecision highp float;\nvarying highp vec2 vTextureCoord;\nuniform sampler2D uSampler;\nvoid main(void) {\n\tgl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n}"},n.updateTexture=function(t,e){ws.texImage2D(t,t.TEXTURE_2D,this._getPixelSource(e))},n.bindTexture=function(t,e,n){var i,r=this.getDimension(n),o=r.width,a=r.height,s=Math.max(o,a),u=ws.getMaxTextureSize(t);s>u&&(this._triggerError("Image width("+o+") exceeds device texture limit("+u+"))"),i=o>a?{width:u,height:u*a/o}:{width:u*o/a,height:u}),this._initPixelSource(n,i),t.activeTexture(t.TEXTURE0),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.bindTexture(t.TEXTURE_2D,e),this.updateTexture(t,n)},n.updateShaderData=function(t){var e,n,r,o,a,s=t.imageAspectRatio,u=void 0===s?6:s;if(u<1?(o=!0,a=1/u):(o=!1,a=u),a>=6){var h=360/a;n=2*Math.PI,r=Math.tan(i.toRadian(h/2))}else n=a,r=.5;js.length=0,Ks.length=0,Zs.length=0;for(var c=[-r,r],l=Math.PI/2+(2*Math.PI-n)/2,f=0,d=c.length;f<d;f++)for(e=0;e<=60;e++){var p=l+e/60*n,v=Math.cos(p),m=c[f],g=Math.sin(p),_=void 0,y=void 0;if(o?(_=1-f,y=e/60):(_=e/60,y=f),js.push(_,y),Ks.push(v,m,g),0===f&&e<60){var x=e,w=x+60+1;Zs.push(x,w,x+1,w,w+1,x+1)}}},e}(bs);return t._VERTEX_POSITION_DATA=Ks,t._TEXTURE_COORD_DATA=js,t._INDEX_DATA=Zs,t}(),$s="undefined"==typeof Promise?U.a.Promise:Promise,tu=[0,0,.5,1],eu=[.5,0,.5,1],nu="left",iu="right",ru=function(){return function(){function t(){var t=this;this.destroy=function(){var e=t._vrDisplay;t.removeEndCallback(t.destroy),e&&e.isPresenting&&e.exitPresent(),t._clear()},this._frameData=new window.VRFrameData,this._clear()}va(t,[{key:"context",get:function(){return this._vrDisplay}}]);var e=t.prototype;return e.canRender=function(){return Boolean(this._vrDisplay)},e.beforeRender=function(t){t.bindFramebuffer(t.FRAMEBUFFER,null)},e.afterRender=function(){this._vrDisplay.submitFrame()},e.getEyeParams=function(t){var e=this._vrDisplay,n=.5*t.drawingBufferWidth,i=t.drawingBufferHeight,r=this._frameData;e.getFrameData(r);var a=r.leftViewMatrix,s=r.rightViewMatrix;return o.rotateY(a,a,this._yawOffset),o.rotateY(s,s,this._yawOffset),[{viewport:[0,0,n,i],mvMatrix:a,pMatrix:r.leftProjectionMatrix},{viewport:[n,0,n,i],mvMatrix:s,pMatrix:r.rightProjectionMatrix}]},e.isPresenting=function(){return Boolean(this._vrDisplay&&this._vrDisplay.isPresenting)},e.addEndCallback=function(t){window.addEventListener("vrdisplaypresentchange",t)},e.removeEndCallback=function(t){window.removeEventListener("vrdisplaypresentchange",t)},e.requestPresent=function(t){var e=this;return new $s((function(n,i){navigator.getVRDisplays().then((function(r){var o=r.length&&r[0];o?o.capabilities.canPresent?o.requestPresent([{source:t}]).then((function(){var i=o.getEyeParameters(nu),r=o.getEyeParameters(iu);t.width=2*Math.max(i.renderWidth,r.renderWidth),t.height=Math.max(i.renderHeight,r.renderHeight),e._setDisplay(o),n()})):i(new Error("Display lacking capability to present.")):i(new Error("No displays available."))}))}))},e.setYawOffset=function(t){this._yawOffset=t},e._setDisplay=function(t){this._vrDisplay=t;var e=t.getLayers();if(e.length){var n=e[0];this._leftBounds=n.leftBounds,this._rightBounds=n.rightBounds}this.addEndCallback(this.destroy)},e._clear=function(){this._vrDisplay=null,this._leftBounds=tu,this._rightBounds=eu,this._yawOffset=0},t}()}(),ou=function(){return function(){function t(){var t=this;this.destroy=function(){var e=t._xrSession;t.removeEndCallback(t.destroy),e&&e.end().then((function(){}),(function(){})),t._clear()},this._clear()}va(t,[{key:"context",get:function(){return this._xrSession}}]);var e=t.prototype;return e.canRender=function(t){var e=t.getViewerPose(this._xrRefSpace);return Boolean(e)},e.beforeRender=function(t,e){var n=e.session.renderState.baseLayer;t.bindFramebuffer(t.FRAMEBUFFER,n.framebuffer)},e.afterRender=function(){},e.getEyeParams=function(t,e){var n=this,r=e.session,a=e.getViewerPose(this._xrRefSpace);if(!a)return null;var s=r.renderState.baseLayer;return a.views.map((function(t){var e=s.getViewport(t),r=t.transform.inverse.matrix;return Ta&&o.rotateX(r,r,i.toRadian(180)),o.rotateY(r,r,n._yawOffset),{viewport:[e.x,e.y,e.width,e.height],mvMatrix:r,pMatrix:t.projectionMatrix}}))},e.isPresenting=function(){return this._presenting},e.addEndCallback=function(t){var e=this._xrSession;e&&e.addEventListener("end",t)},e.removeEndCallback=function(t){var e=this._xrSession;e&&e.removeEventListener("end",t)},e.requestPresent=function(t,e){var n=this;return navigator.xr.requestSession("immersive-vr",{requiredFeatures:["local"]}).then((function(t){var i=new window.XRWebGLLayer(t,e);return t.updateRenderState({baseLayer:i}),t.requestReferenceSpace("local").then((function(e){n._setSession(t,i,e)}))}))},e.setYawOffset=function(t){this._yawOffset=t},e._setSession=function(t,e,n){this._xrSession=t,this._xrLayer=e,this._xrRefSpace=n,this._presenting=!0,this.addEndCallback(this.destroy)},e._clear=function(){this._xrSession=null,this._xrLayer=null,this._xrRefSpace=null,this._presenting=!1,this._yawOffset=0},t}()}(),au=function(){return function(){function t(){var t=this;this._onLoop=function(){t._callback.apply(t,arguments),t._rafId=t._context.requestAnimationFrame(t._onLoop)},this._onLoopNextTick=function(){var e=performance.now();t._callback.apply(t,arguments);var n=performance.now()-e;t._rafTimer>=0&&(clearTimeout(t._rafTimer),t._rafTimer=-1),n<16?t._rafId=t._context.requestAnimationFrame(t._onLoop):t._rafTimer=setTimeout(t._onLoop,0)},this._callback=null,this._context=window,this._rafId=-1,this._rafTimer=-1}var e=t.prototype;return e.setCallback=function(t){this._callback=t},e.setContext=function(t){this._context=t},e.start=function(){var t=this._context,e=this._callback;t&&e&&(this._rafId>=0||this._rafTimer>=0||(this._rafId=Ta?t.requestAnimationFrame(this._onLoopNextTick):t.requestAnimationFrame(this._onLoop)))},e.stop=function(){this._rafId>=0&&this._context.cancelAnimationFrame(this._rafId),this._rafTimer>=0&&clearTimeout(this._rafTimer),this._rafId=-1,this._rafTimer=-1},t}()}(),su="undefined"==typeof Promise?U.a.Promise:Promise,uu=Os,hu=Ia||1;hu>2&&(hu=2);var cu={BIND_TEXTURE:"bindTexture",IMAGE_LOADED:"imageLoaded",ERROR:"error",RENDERING_CONTEXT_LOST:"renderingContextLost",RENDERING_CONTEXT_RESTORE:"renderingContextRestore"},lu={INVALID_DEVICE:10,NO_WEBGL:11,FAIL_IMAGE_LOAD:12,RENDERER_ERROR:13},fu=function(){var t=function(t){function e(e,n,s,u,h,c){var l;return(l=t.call(this)||this)._renderStereo=function(t,e){var n=l._vr,i=l.context,r=n.getEyeParams(i,e);if(r){n.beforeRender(i,e);for(var o=0,a=[0,1];o<a.length;o++){var s=a[o],u=r[s];l.mvMatrix=u.mvMatrix,l.pMatrix=u.pMatrix,i.viewport.apply(i,u.viewport),i.uniform1f(l.shaderProgram.uEye,s),l._bindBuffers(),l._draw()}n.afterRender()}},l.exitVR=function(){var t=l._vr,e=l.context,n=l._animator;t&&(t.removeEndCallback(l.exitVR),t.destroy(),l._vr=null,Ea&&l._restoreStyle(),l.updateViewportDimensions(l.width,l.height),l._updateViewport(),e.bindFramebuffer(e.FRAMEBUFFER,null),l._bindBuffers(),l._shouldForceDraw=!0,n.stop(),n.setContext(window),n.setCallback(l._render.bind(_a(l))),n.start())},l._onFirstVRFrame=function(t,e){var n=l._vr,i=l.context,o=l._animator;if(n.canRender(e)){var s=a.fromValues(0,0,-1),u=n.getEyeParams(i,e)[0],h=r.fromMat4(r.create(),u.mvMatrix),c=r.fromMat4(r.create(),u.pMatrix),f=r.invert(r.create(),h),d=r.invert(r.create(),c),p=a.transformMat3(a.create(),s,d);a.transformMat3(p,p,f);var v=Ca.yawOffsetBetween(p,a.fromValues(0,0,1));0!==v&&(n.setYawOffset(v),o.setCallback(l._renderStereo))}},l.sphericalConfig=h,l.fieldOfView=h.fieldOfView,l.width=n,l.height=s,l._lastQuaternion=null,l._lastYaw=null,l._lastPitch=null,l._lastFieldOfView=null,l.pMatrix=o.create(),l.mvMatrix=o.create(),o.perspective(l.pMatrix,i.toRadian(l.fieldOfView),n/s,.1,100),l.textureCoordBuffer=null,l.vertexBuffer=null,l.indexBuffer=null,l.canvas=l._initCanvas(n,s),l._setDefaultCanvasStyle(),l._wrapper=null,l._wrapperOrigStyle=null,l._renderingContextAttributes=c,l._image=null,l._imageConfig=null,l._imageIsReady=!1,l._shouldForceDraw=!1,l._keepUpdate=!1,l._onContentLoad=l._onContentLoad.bind(_a(l)),l._onContentError=l._onContentError.bind(_a(l)),l._animator=new au,l._vr=null,e&&l.setImage({image:e,imageType:h.imageType,isVideo:u,cubemapConfig:h.cubemapConfig}),l}ga(e,t);var n=e.prototype;return n.setYawPitchControl=function(t){this._yawPitchControl=t},n.getContent=function(){return this._image},n.setImage=function(t){var e=t.image,n=t.imageType,i=t.isVideo,r=void 0!==i&&i,o=t.cubemapConfig;return this._imageIsReady=!1,this._isVideo=r,this._imageConfig=ma({order:n===uu.CUBEMAP?"RLUDBF":"RLUDFB",tileConfig:{flipHorizontal:!1,rotation:0}},o),this._setImageType(n),this._contentLoader&&this._contentLoader.destroy(),r?(this._contentLoader=new _s,this._keepUpdate=!0):(this._contentLoader=new ss,this._keepUpdate=!1),this._contentLoader.set(e),this._image=this._contentLoader.getElement(),this._contentLoader.get().then(this._onContentLoad,this._onContentError).catch((function(t){return setTimeout((function(){throw t}))}))},n._setImageType=function(t){var e=this;if(t&&this._imageType!==t){switch(this._imageType=t,this._isCubeMap=t===uu.CUBEMAP,this._renderer&&this._renderer.off(),t){case uu.CUBEMAP:this._renderer=new Rs;break;case uu.CUBESTRIP:this._renderer=new Ps;break;case uu.PANORAMA:this._renderer=new Js;break;case uu.STEREOSCOPIC_EQUI:this._renderer=new Hs(this.sphericalConfig.stereoFormat);break;default:this._renderer=new Hs(Ss.NONE)}this._renderer.on(bs.EVENTS.ERROR,(function(t){e.trigger(cu.ERROR,{type:lu.RENDERER_ERROR,message:t.message})})),this._initWebGL()}},n._initCanvas=function(t,e){var n=document.createElement("canvas");return n.width=t,n.height=e,this._onWebglcontextlost=this._onWebglcontextlost.bind(this),this._onWebglcontextrestored=this._onWebglcontextrestored.bind(this),n.addEventListener("webglcontextlost",this._onWebglcontextlost),n.addEventListener("webglcontextrestored",this._onWebglcontextrestored),n},n._setDefaultCanvasStyle=function(){var t=this.canvas;t.style.bottom=0,t.style.left=0,t.style.right=0,t.style.top=0,t.style.margin="auto",t.style.maxHeight="100%",t.style.maxWidth="100%",t.style.outline="none",t.style.position="absolute"},n._onContentError=function(t){return this._imageIsReady=!1,this._image=null,this.trigger(cu.ERROR,{type:lu.FAIL_IMAGE_LOAD,message:"failed to load image"}),!1},n._triggerContentLoad=function(){this.trigger(cu.IMAGE_LOADED,{content:this._image,isVideo:this._isVideo,projectionType:this._imageType})},n._onContentLoad=function(t){return this._imageIsReady=!0,this._triggerContentLoad(),!0},n.isImageLoaded=function(){return!!this._image&&this._imageIsReady&&(!this._isVideo||this._image.readyState>=2)},n.bindTexture=function(){var t=this;return new su((function(e,n){t._contentLoader?t._contentLoader.get().then((function(){t._bindTexture()}),n).then(e):n("ImageLoader is not initialized")}))},n.attachTo=function(t){this.detach(),t.appendChild(this.canvas),this._wrapper=t},n.forceContextLoss=function(){if(this.hasRenderingContext()){var t=this.context.getExtension("WEBGL_lose_context");t&&t.loseContext()}},n.detach=function(){this.canvas.parentElement&&this.canvas.parentElement.removeChild(this.canvas)},n.destroy=function(){this._contentLoader&&this._contentLoader.destroy(),this._animator.stop(),this.detach(),this.forceContextLoss(),this.off(),this.canvas.removeEventListener("webglcontextlost",this._onWebglcontextlost),this.canvas.removeEventListener("webglcontextrestored",this._onWebglcontextrestored)},n.hasRenderingContext=function(){return!(!this.context||this.context.isContextLost())&&!(this.context&&!this.context.getProgramParameter(this.shaderProgram,this.context.LINK_STATUS))},n._initShaderProgram=function(){var t=this.context;this.shaderProgram&&(t.deleteProgram(this.shaderProgram),this.shaderProgram=null);var e=this._renderer,n=e.getVertexShaderSource(),i=e.getFragmentShaderSource(),r=ws.createShader(t,t.VERTEX_SHADER,n),o=ws.createShader(t,t.FRAGMENT_SHADER,i),a=ws.createProgram(t,r,o);if(!a)throw new Error("Failed to intialize shaders: "+ws.getErrorNameFromWebGLErrorCode(t.getError()));t.useProgram(a),a.vertexPositionAttribute=t.getAttribLocation(a,"aVertexPosition"),t.enableVertexAttribArray(a.vertexPositionAttribute),a.pMatrixUniform=t.getUniformLocation(a,"uPMatrix"),a.mvMatrixUniform=t.getUniformLocation(a,"uMVMatrix"),a.samplerUniform=t.getUniformLocation(a,"uSampler"),a.textureCoordAttribute=t.getAttribLocation(a,"aTextureCoord"),a.uEye=t.getUniformLocation(a,"uEye"),t.enableVertexAttribArray(a.textureCoordAttribute),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),t.uniform1i(a.samplerUniform,0),this.shaderProgram=a},n._onWebglcontextlost=function(t){t.preventDefault(),this.trigger(cu.RENDERING_CONTEXT_LOST)},n._onWebglcontextrestored=function(t){this._initWebGL(),this.trigger(cu.RENDERING_CONTEXT_RESTORE)},n.updateFieldOfView=function(t){this.fieldOfView=t,this._updateViewport()},n.updateViewportDimensions=function(t,e){var n=!1;this.width=t,this.height=e;var i=t*hu,r=e*hu;i!==this.canvas.width&&(this.canvas.width=i,n=!0),r!==this.canvas.height&&(this.canvas.height=r,n=!0),n&&(this._updateViewport(),this._shouldForceDraw=!0)},n._updateViewport=function(){o.perspective(this.pMatrix,i.toRadian(this.fieldOfView),this.canvas.width/this.canvas.height,.1,100),this.context.viewport(0,0,this.context.drawingBufferWidth,this.context.drawingBufferHeight)},n._initWebGL=function(){var t;try{this._initRenderingContext(),t=this.context,this.updateViewportDimensions(this.width,this.height),this._initShaderProgram()}catch(t){return this.trigger(cu.ERROR,{type:lu.NO_WEBGL,message:"no webgl support"}),this.destroy(),void console.error(t)}t.clearColor(0,0,0,0);var e=this._isCubeMap?t.TEXTURE_CUBE_MAP:t.TEXTURE_2D;this.texture&&t.deleteTexture(this.texture),this.texture=ws.createTexture(t,e),this._imageType===uu.CUBESTRIP&&t.enable(t.CULL_FACE)},n._initRenderingContext=function(){if(!this.hasRenderingContext()){if(!window.WebGLRenderingContext)throw new Error("WebGLRenderingContext not available.");if(this.context=ws.getWebglContext(this.canvas,this._renderingContextAttributes),!this.context)throw new Error("Failed to acquire 3D rendering context")}},n._initBuffers=function(){var t=this._renderer.getVertexPositionData(),e=this._renderer.getIndexData(),n=this._renderer.getTextureCoordData(this._imageConfig),i=this.context;this.vertexBuffer=ws.initBuffer(i,i.ARRAY_BUFFER,new Float32Array(t),3,this.shaderProgram.vertexPositionAttribute),this.indexBuffer=ws.initBuffer(i,i.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),1),this.textureCoordBuffer=ws.initBuffer(i,i.ARRAY_BUFFER,new Float32Array(n),this._isCubeMap?3:2,this.shaderProgram.textureCoordAttribute),this._bindBuffers()},n._bindTexture=function(){if(this._imageType===uu.CUBESTRIP){var t=this._renderer.getDimension(this._image),e=t.width,n=t.height,i=e&&n&&e/n!=1.5;this.context.uniform1f(this.context.getUniformLocation(this.shaderProgram,"uIsEAC"),i)}else if(this._imageType===uu.PANORAMA){var r=this._renderer.getDimension(this._image),o=r.width,a=r.height,s=o&&a&&o/a;this._renderer.updateShaderData({imageAspectRatio:s})}this._initBuffers(),this._renderer.bindTexture(this.context,this.texture,this._image,this._imageConfig),this._shouldForceDraw=!0,this.trigger(cu.BIND_TEXTURE)},n._updateTexture=function(){this._renderer.updateTexture(this.context,this._image,this._imageConfig)},n.keepUpdate=function(t){t&&!1===this.isImageLoaded()&&(this._shouldForceDraw=!0),this._keepUpdate=t},n.startRender=function(){this._animator.setCallback(this._render.bind(this)),this._animator.start()},n.stopRender=function(){this._animator.stop()},n.renderWithQuaternion=function(t,e){this.isImageLoaded()&&(!1===this._keepUpdate&&this._lastQuaternion&&s.exactEquals(this._lastQuaternion,t)&&this.fieldOfView&&this.fieldOfView===e&&!1===this._shouldForceDraw||(void 0!==e&&e!==this.fieldOfView&&this.updateFieldOfView(e),this.mvMatrix=o.fromQuat(o.create(),t),this._draw(),this._lastQuaternion=s.clone(t),this._shouldForceDraw&&(this._shouldForceDraw=!1)))},n.renderWithYawPitch=function(t,e,n){this.isImageLoaded()&&(!1===this._keepUpdate&&null!==this._lastYaw&&this._lastYaw===t&&null!==this._lastPitch&&this._lastPitch===e&&this.fieldOfView&&this.fieldOfView===n&&!1===this._shouldForceDraw||(void 0!==n&&n!==this.fieldOfView&&this.updateFieldOfView(n),o.identity(this.mvMatrix),o.rotateX(this.mvMatrix,this.mvMatrix,-i.toRadian(e)),o.rotateY(this.mvMatrix,this.mvMatrix,-i.toRadian(t)),this._draw(),this._lastYaw=t,this._lastPitch=e,this._shouldForceDraw&&(this._shouldForceDraw=!1)))},n._render=function(){var t=this._yawPitchControl,e=t.getFov();if(t.shouldRenderWithQuaternion()){var n=t.getQuaternion();this.renderWithQuaternion(n,e)}else{var i=t.getYawPitch();this.renderWithYawPitch(i.yaw,i.pitch,e)}},n._bindBuffers=function(){var t=this.context,e=this.shaderProgram,n=this.vertexBuffer,i=this.textureCoordBuffer;t.bindBuffer(t.ARRAY_BUFFER,n),t.enableVertexAttribArray(e.vertexPositionAttribute),t.vertexAttribPointer(e.vertexPositionAttribute,n.itemSize,t.FLOAT,!1,0,0),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bindBuffer(t.ARRAY_BUFFER,i),t.enableVertexAttribArray(e.textureCoordAttribute),t.vertexAttribPointer(e.textureCoordAttribute,i.itemSize,t.FLOAT,!1,0,0)},n._draw=function(){this._isVideo&&this._keepUpdate&&this._updateTexture(),this._renderer.render({gl:this.context,shaderProgram:this.shaderProgram,indexBuffer:this.indexBuffer,mvMatrix:this.mvMatrix,pMatrix:this.pMatrix})},n.getProjectionRenderer=function(){return this._renderer},n.enterVR=function(){var t=this._vr;return Oa||navigator.getVRDisplays?t&&t.isPresenting()?su.resolve("VR already enabled."):this._requestPresent():su.reject("VR is not available on this browser.")},n._requestPresent=function(){var t=this,e=this.context,n=this.canvas,i=this._animator;this._vr=Oa?new ou:new ru;var r=this._vr;return i.stop(),new su((function(o,a){r.requestPresent(n,e).then((function(){r.addEndCallback(t.exitVR),i.setContext(r.context),i.setCallback(t._onFirstVRFrame),Ea&&t._setWrapperFullscreen(),t._shouldForceDraw=!0,i.start(),o("success")})).catch((function(e){r.destroy(),t._vr=null,i.start(),a(e)}))}))},n._setWrapperFullscreen=function(){var t=this._wrapper;if(t){this._wrapperOrigStyle=t.getAttribute("style");var e=t.style;e.width="100vw",e.height="100vh",e.position="fixed",e.left="0",e.top="0",e.zIndex="9999"}},n._restoreStyle=function(){var t=this._wrapper,e=this.canvas;t&&(this._wrapperOrigStyle?t.setAttribute("style",this._wrapperOrigStyle):t.removeAttribute("style"),this._wrapperOrigStyle=null,e.removeAttribute("style"),this._setDefaultCanvasStyle())},e}(bo);return t.EVENTS=cu,t.ERROR_TYPE=lu,t}(),du="undefined"==typeof Promise?U.a.Promise:Promise,pu=function(){var t=function(t){function e(n,i){var r;if(void 0===i&&(i={}),r=t.call(this)||this,!ws.isWebGLAvailable())return setTimeout((function(){r.trigger(Is.ERROR,{type:As.NO_WEBGL,message:"no webgl support"})}),0),_a(r)||_a(r);if(!ws.isStableWebGL())return setTimeout((function(){r.trigger(Is.ERROR,{type:As.INVALID_DEVICE,message:"blacklisted browser"})}),0),_a(r)||_a(r);if(i.image&&i.video)return setTimeout((function(){r.trigger(Is.ERROR,{type:As.INVALID_RESOURCE,message:"Specifying multi resouces(both image and video) is not valid."})}),0),_a(r)||_a(r);navigator.xr&&(navigator.xr.isSessionSupported?navigator.xr.isSessionSupported("immersive-vr").then((function(t){Oa=t})).catch((function(){})):navigator.xr.supportsSession&&navigator.xr.supportsSession("immersive-vr").then((function(t){Oa=t})).catch((function(){}))),r._container=n,r._image=i.image||i.video,r._isVideo=!!i.video,r._projectionType=i.projectionType||Os.EQUIRECTANGULAR,r._cubemapConfig=ma({order:r._projectionType===Os.CUBEMAP?"RLUDBF":"RLUDFB",tileConfig:{flipHorizontal:!1,rotation:0}},i.cubemapConfig),r._stereoFormat=i.stereoFormat||Ss.TOP_BOTTOM,r._width=i.width||parseInt(window.getComputedStyle(n).width,10),r._height=i.height||parseInt(window.getComputedStyle(n).height,10),r._yaw=i.yaw||0,r._pitch=i.pitch||0,r._fov=i.fov||65,r._gyroMode=i.gyroMode||Ya.YAWPITCH,r._quaternion=null,r._aspectRatio=0!==r._height?r._width/r._height:1;var o=i.fovRange||[30,110],a=e._isValidTouchDirection(i.touchDirection)?i.touchDirection:is.TOUCH_DIRECTION_ALL,s=ma(i,{element:n,yaw:r._yaw,pitch:r._pitch,fov:r._fov,gyroMode:r._gyroMode,fovRange:o,aspectRatio:r._aspectRatio,touchDirection:a});return r._isReady=!1,r._initYawPitchControl(s),r._initRenderer(r._yaw,r._pitch,r._fov,r._projectionType,r._cubemapConfig),r}ga(e,t);var n=e.prototype;return n.getVideo=function(){return this._isVideo?this._photoSphereRenderer.getContent():null},n.setVideo=function(t,e){return void 0===e&&(e={}),t&&this.setImage(t,{projectionType:e.projectionType,isVideo:!0,cubemapConfig:e.cubemapConfig,stereoFormat:e.stereoFormat}),this},n.getImage=function(){return this._isVideo?null:this._photoSphereRenderer.getContent()},n.setImage=function(t,e){void 0===e&&(e={});var n=ma({order:"RLUDBF",tileConfig:{flipHorizontal:!1,rotation:0}},e.cubemapConfig),i=e.stereoFormat||Ss.TOP_BOTTOM,r=!!e.isVideo;return this._image&&this._isVideo!==r?(console.warn("Currently not supporting to change content type(Image <--\x3e Video)"),this):(t&&(this._image=t,this._isVideo=r,this._projectionType=e.projectionType||Os.EQUIRECTANGULAR,this._cubemapConfig=n,this._stereoFormat=i,this._deactivate(),this._initRenderer(this._yaw,this._pitch,this._fov,this._projectionType,this._cubemapConfig)),this)},n.keepUpdate=function(t){return this._photoSphereRenderer.keepUpdate(t),this},n.getProjectionType=function(){return this._projectionType},n.enableSensor=function(){return new du((function(t,e){Aa&&"function"==typeof Aa.requestPermission?Aa.requestPermission().then((function(n){"granted"===n?t():e(new Error("permission denied"))})).catch((function(t){e(t)})):t()}))},n.disableSensor=function(){return this},n.enterVR=function(){var t=this;return this._isReady?new du((function(e,n){t.enableSensor().then((function(){return t._photoSphereRenderer.enterVR()})).then((function(t){return e(t)})).catch((function(t){return n(t)}))})):du.reject(new Error("PanoViewer is not ready to show image."))},n.exitVR=function(){return this._photoSphereRenderer.exitVR(),this},n._initRenderer=function(t,e,n,i,r){var o=this;this._photoSphereRenderer=new fu(this._image,this._width,this._height,this._isVideo,{initialYaw:t,initialPitch:e,fieldOfView:n,imageType:i,cubemapConfig:r,stereoFormat:this._stereoFormat}),this._photoSphereRenderer.setYawPitchControl(this._yawPitchControl),this._bindRendererHandler(),this._photoSphereRenderer.bindTexture().then((function(){return o._activate()})).catch((function(){o._triggerEvent(Is.ERROR,{type:As.FAIL_BIND_TEXTURE,message:"failed to bind texture"})}))},n._updateYawPitchIfNeeded=function(){if(this._projectionType===e.ProjectionType.PANORAMA){var t,n,i,r=this._photoSphereRenderer.getContent(),o=r.naturalWidth/r.naturalHeight;o<1&&(o=1/o),o<6?(n=Ca.toDegree(o),t=!1,i=2*Ca.toDegree(Math.atan(.5))):(n=360,t=!0,i=360/o);var a=this._yawPitchControl.option("fovRange")[0];this._yawPitchControl.option({fov:i,yawRange:[-n/2,n/2],isCircular:t,pitchRange:[-i/2,i/2],fovRange:[a,i]}),this.lookAt({fov:i})}},n._bindRendererHandler=function(){var t=this;this._photoSphereRenderer.on(fu.EVENTS.ERROR,(function(e){t.trigger(Is.ERROR,e)})),this._photoSphereRenderer.on(fu.EVENTS.RENDERING_CONTEXT_LOST,(function(e){t._deactivate(),t.trigger(Is.ERROR,{type:As.RENDERING_CONTEXT_LOST,message:"webgl rendering context lost"})}))},n._initYawPitchControl=function(t){var e=this;this._yawPitchControl=new is(t),this._yawPitchControl.on(Is.ANIMATION_END,(function(t){e._triggerEvent(Is.ANIMATION_END,t)})),this._yawPitchControl.on("change",(function(t){e._yaw=t.yaw,e._pitch=t.pitch,e._fov=t.fov,e._quaternion=t.quaternion,e._triggerEvent(Is.VIEW_CHANGE,t)}))},n._triggerEvent=function(t,e){var n=e||{};return this.trigger(t,n)},n.setUseZoom=function(t){return"boolean"==typeof t&&this._yawPitchControl.option("useZoom",t),this},n.setUseKeyboard=function(t){return this._yawPitchControl.option("useKeyboard",t),this},n.setGyroMode=function(t){return this._yawPitchControl.option("gyroMode",t),this},n.setFovRange=function(t){return this._yawPitchControl.option("fovRange",t),this},n.getFovRange=function(){return this._yawPitchControl.option("fovRange")},n.updateViewportDimensions=function(t){if(void 0===t&&(t={width:void 0,height:void 0}),!this._isReady)return this;var e;void 0!==t.width&&void 0!==t.height||(e=window.getComputedStyle(this._container));var n=t.width||parseInt(e.width,10),i=t.height||parseInt(e.height,10);return n===this._width&&i===this._height||(this._width=n,this._height=i,this._aspectRatio=n/i,this._photoSphereRenderer.updateViewportDimensions(n,i),this._yawPitchControl.option("aspectRatio",this._aspectRatio),this._yawPitchControl.updatePanScale({height:i}),this.lookAt({},0)),this},n.getFov=function(){return this._fov},n._getHFov=function(){return Ca.toDegree(2*Math.atan(this._aspectRatio*Math.tan(i.toRadian(this._fov)/2)))},n.getYaw=function(){return this._yaw},n.getPitch=function(){return this._pitch},n.getYawRange=function(){return this._yawPitchControl.option("yawRange")},n.getPitchRange=function(){return this._yawPitchControl.option("pitchRange")},n.setYawRange=function(t){return this._yawPitchControl.option("yawRange",t),this},n.setPitchRange=function(t){return this._yawPitchControl.option("pitchRange",t),this},n.setShowPolePoint=function(t){return this._yawPitchControl.option("showPolePoint",t),this},n.lookAt=function(t,e){if(!this._isReady)return this;var n=void 0!==t.yaw?t.yaw:this._yaw,i=void 0!==t.pitch?t.pitch:this._pitch,r=this._yawPitchControl.option("pitchRange"),o=r[1]-r[0],a=void 0!==t.fov?t.fov:this._fov;return o<a&&(a=o),this._yawPitchControl.lookAt({yaw:n,pitch:i,fov:a},e),0===e&&this._photoSphereRenderer.renderWithYawPitch(n,i,a),this},n._activate=function(){this._photoSphereRenderer.attachTo(this._container),this._yawPitchControl.enable(),this.updateViewportDimensions(),this._isReady=!0,this._updateYawPitchIfNeeded(),this._triggerEvent(Is.READY),this._photoSphereRenderer.startRender()},n._deactivate=function(){this._isReady&&(this._photoSphereRenderer.stopRender(),this._yawPitchControl.disable(),this._isReady=!1),this._photoSphereRenderer&&(this._photoSphereRenderer.destroy(),this._photoSphereRenderer=null)},e._isValidTouchDirection=function(t){return t===e.TOUCH_DIRECTION.NONE||t===e.TOUCH_DIRECTION.YAW||t===e.TOUCH_DIRECTION.PITCH||t===e.TOUCH_DIRECTION.ALL},n.setTouchDirection=function(t){return e._isValidTouchDirection(t)&&this._yawPitchControl.option("touchDirection",t),this},n.getTouchDirection=function(){return this._yawPitchControl.option("touchDirection")},n.destroy=function(){return this._deactivate(),this._yawPitchControl&&(this._yawPitchControl.destroy(),this._yawPitchControl=null),this},e.isSupported=function(){return ws.isWebGLAvailable()&&ws.isStableWebGL()},e.isWebGLAvailable=function(){return ws.isWebGLAvailable()},e.isGyroSensorAvailable=function(t){var n;Aa?du.race([new du((function(t,e){n=function(e){var n=!(null==e.rotationRate.alpha);t(n)},window.addEventListener("devicemotion",n)})),new du((function(t,e){setTimeout((function(){return t(!1)}),1e3)}))]).then((function(i){window.removeEventListener("devicemotion",n),t&&t(i),e.isGyroSensorAvailable=function(t){return t&&t(i),i}})):t&&t(!1)},e}(bo);return t.VERSION="3.3.1",t.ERROR_TYPE=As,t.EVENTS=Is,t.PROJECTION_TYPE=Os,t.GYRO_MODE=Ya,t.ProjectionType=Os,t.STEREO_FORMAT=Ss,t.TOUCH_DIRECTION={NONE:is.TOUCH_DIRECTION_NONE,YAW:is.TOUCH_DIRECTION_YAW,PITCH:is.TOUCH_DIRECTION_PITCH,ALL:is.TOUCH_DIRECTION_ALL},t}();let vu=!1;window.toggleEdit=function(t){vu=!vu,t.target.innerText=vu?"关闭":"编辑",t.stopPropagation()};let mu=Array.prototype.slice.call(document.querySelectorAll(".hotspot"));const gu=document.querySelector("#myviewer"),_u=new pu(gu,{image:"./images/bookcube1.jpg",projectionType:pu.PROJECTION_TYPE.CUBEMAP,useZoom:!1,cubemapConfig:{tileConfig:{flipHorizontal:!0,rotation:0}}}).on("viewChange",t=>{var e;console.log("yaw",_u.getYaw()),console.log("pitch",_u.getPitch()),e=_u,mu.filter((function(t){return"1"===t.getAttribute("data-page")})).forEach((function(t){wu(t,e)}))});function yu(t){return t*Math.PI/180}function xu(t){var e=gu.getBoundingClientRect(),n=e.width,i=e.height;return Math.atan(n/i*Math.tan(yu(t)/2))/Math.PI*360}function wu(t,e){var n=e.getYaw(),i=e.getPitch(),r=parseFloat(t.getAttribute("data-yaw"))-n,o=parseFloat(t.getAttribute("data-pitch"))-i;if(r<-180?r+=360:r>180&&(r-=360),Math.abs(r)>90)t.style.transform="translate(-200px, 0px)";else{var a=yu(r),s=yu(o),u=e.getFov(),h=xu(u),c=Math.tan(yu(h)/2),l=Math.tan(yu(u)/2),f=[Math.tan(-a)/c,Math.tan(-s)/l];(f=f.map((function(t){return t*Math.cos(15/180*Math.PI)})))[1]=function(t,e){var n=yu(e),i=Math.cos(n),r=Math.sin(n);return[i*t[0]-r*t[1],r*t[0]+i*t[1]]}(f,r>0?-10:10)[1];var d=e._width/2+f[0]*e._width/2,p=e._height/2+f[1]*e._height/2;t.style.transform="translate("+d+"px, "+p+"px) translate(-50%, -50%)"}}window.addEventListener("click",t=>{if(console.log(_u._width,_u._height),vu){let{fYaw:e,fPitch:n}=function({clientX:t,clientY:e}){let n=_u.getYaw(),i=_u.getPitch(),r=_u.getFov(),o=xu(r),a=t-_u._width/2,s=e-_u._height/2,u=_u._width/Math.tan(yu(o)/2)/2,h=(_u._height,Math.tan(yu(r)/2),180*(a/u)/Math.PI),c=Math.sqrt(Math.pow(u,2)+Math.pow(a,2));return{fYaw:n-h,fPitch:i-180*Math.asin(s/c)/Math.PI}}(t);_u.lookAt({yaw:e,pitch:n});let i=document.createElement("div");i.setAttribute("class","hotspot link"),i.setAttribute("data-page","1"),i.setAttribute("data-yaw",_u.getYaw()),i.setAttribute("data-pitch",_u.getPitch()),i.onclick=window.lookAt,i.innerText="新标签",document.querySelector(".viewer").appendChild(i),mu.push(i),wu(i,_u)}}),window.lookAt=function({target:t}){let e=t.getAttribute("data-yaw"),n=t.getAttribute("data-pitch");console.log(e,n,_u.getFov());let i=parseFloat(e);console.log(i),_u.lookAt({yaw:i,pitch:n,fov:_u.getFov()},500)};let Eu={},Tu={yaw:!1,pitch:!1};window.auto=function(t){Tu[t]=!Tu[t],Tu[t]?Eu[t]=setInterval(()=>{_u.lookAt({yaw:"yaw"==t?_u.getYaw()+1:_u.getYaw(),pitch:"pitch"==t?_u.getPitch()+1:_u.getPitch()})},1e3):clearInterval(Eu[t])}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,